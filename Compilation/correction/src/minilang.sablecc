/* Grammar of a mini procedural programming language */
Grammar minilang;

Lexer
l = 'a'..'z'|'A'..'Z'|'_';
d = '0'..'9';
id = l+;
int = d+;
char = '\'' Any;
str = '"' (Any - '"')* '"';
comment = '//' (Any - '\n')* '\n'?;
blank = ' ' | '\n' | '\t' | comment;

Parser
Ignored blank;

prog = s*;

s =
	{assign:} id '=' e |
	{print:} 'print' e |
	{print_byte:} 'print' 'byte' e |
	{print_str:} 'print' str |
	{println:} 'println' |
	{while:} 'while' c s |
	{if:} 'if' c [then:]s else? |
	{stmts:} '(' s* ')' ;

else = 'else' s;

e = 
	{lit:} int |
	{cha:} char |
	{par:} '(' e ')' |
	{var:} id |
	{read:} 'read' |
	{read_byte:} 'read' 'byte'
Unary
	{neg:} '-' e
Left
	{mul:} [left:]e '*' [right:]e |
	{div:} [left:]e '/' [right:]e
Left
	{add:} [left:]e '+' [right:]e |
	{sub:} [left:]e '-' [right:]e ;

c =
	{cp:} [left:]e [rights:]cp* |
	{par:} '(' c ')'
Unary
	{not:} 'not' c
Left
	{and:} [left:]c '&&' [right:]c
Left
	{or:} [left:]c '||' [right:]c ;

cp =
	{eq:} '=' [right:]e |
	{ne:} '!=' [right:]e |
	{lt:} '<' [right:]e |
	{le:} '<=' [right:]e |
	{gt:} '>' [right:]e |
	{ge:} '>=' [right:]e ;

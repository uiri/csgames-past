/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.syntax3.node;

import java.util.*;
import org.sablecc.objectmacro.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AExpand extends PExpand
{
    private final LinkedList<PMacroReference> _macroReferences_ = new LinkedList<PMacroReference>();
    private final LinkedList<POption> _options_ = new LinkedList<POption>();

    public AExpand()
    {
        // Constructor
    }

    public AExpand(
        @SuppressWarnings("hiding") List<PMacroReference> _macroReferences_,
        @SuppressWarnings("hiding") List<POption> _options_)
    {
        // Constructor
        setMacroReferences(_macroReferences_);

        setOptions(_options_);

    }

    @Override
    public Object clone()
    {
        return new AExpand(
            cloneList(this._macroReferences_),
            cloneList(this._options_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpand(this);
    }

    public LinkedList<PMacroReference> getMacroReferences()
    {
        return this._macroReferences_;
    }

    public void setMacroReferences(List<PMacroReference> list)
    {
        this._macroReferences_.clear();
        this._macroReferences_.addAll(list);
        for(PMacroReference e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<POption> getOptions()
    {
        return this._options_;
    }

    public void setOptions(List<POption> list)
    {
        this._options_.clear();
        this._options_.addAll(list);
        for(POption e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._macroReferences_)
            + toString(this._options_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._macroReferences_.remove(child))
        {
            return;
        }

        if(this._options_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PMacroReference> i = this._macroReferences_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMacroReference) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<POption> i = this._options_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POption) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

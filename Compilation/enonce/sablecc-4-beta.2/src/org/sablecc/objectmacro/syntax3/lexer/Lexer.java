/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.syntax3.lexer;

import java.io.*;
import org.sablecc.objectmacro.syntax3.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.TOP_LEVEL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 4: state = State.LONG_COMMENT; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 4: state = State.LONG_COMMENT; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.SHORT_COMMENT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.LONG_COMMENT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.TEXT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.TEXT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.TEXT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 3: state = State.SHORT_COMMENT; break;
                                case 2: state = State.TEXT; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMAND; break;
                                case 0: state = State.TOP_LEVEL; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.STRING; break;
                                case 5: state = State.COMMAND; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.STRING; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.STRING; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMacroCommand(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTextBlockCommand(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExpandCommand(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInsertCommand(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndCommand(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TShortCommentCommand(line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommandTail(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLongCommentStart(line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLongCommentEnd(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNoEol(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInvalidMidLineNoEol(line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInvalidCommand(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TShortCommentText(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLongCommentText(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TText(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEol(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEscape(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInvalidVar(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInvalidIdentifier(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLPar(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRPar(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDquote(line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringText(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringEscape(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCtrlZ(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInvalidCharacter(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // TOP_LEVEL
            {{0, 8, 1}, {9, 13, 2}, {14, 25, 1}, {26, 26, 3}, {27, 31, 1}, {32, 32, 2}, {33, 35, 1}, {36, 36, 4}, {37, 39, 1}, {40, 40, 5}, {41, 41, 6}, {42, 43, 1}, {44, 44, 7}, {45, 47, 1}, {48, 57, 8}, {58, 59, 1}, {60, 60, 9}, {61, 61, 10}, {62, 64, 1}, {65, 90, 8}, {91, 94, 1}, {95, 95, 8}, {96, 96, 1}, {97, 122, 11}, {123, 65535, 1}, },
            {},
            {{9, 13, 12}, {32, 32, 12}, },
            {},
            {{9, 9, 13}, {10, 12, 14}, {13, 13, 15}, {32, 32, 13}, {36, 36, 16}, {40, 40, 17}, {48, 57, 18}, {58, 58, 19}, {60, 60, 20}, {65, 90, 21}, {95, 95, 22}, {97, 98, 23}, {99, 99, 24}, {100, 100, 23}, {101, 101, 25}, {102, 104, 23}, {105, 105, 26}, {106, 108, 23}, {109, 109, 27}, {110, 110, 28}, {111, 115, 23}, {116, 116, 29}, {117, 122, 23}, },
            {},
            {},
            {},
            {{48, 57, 30}, {65, 90, 30}, {95, 95, 30}, {97, 122, 30}, },
            {{48, 57, 31}, {62, 62, 32}, {65, 90, 33}, {95, 95, 31}, {97, 122, 33}, },
            {},
            {{48, 57, 34}, {65, 90, 30}, {95, 95, 35}, {97, 122, 36}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {},
            {{10, 10, 37}, },
            {},
            {{41, 41, 38}, {48, 57, 39}, {65, 90, 39}, {95, 95, 39}, {97, 122, 40}, },
            {{36, 36, 16}, {48, 58, -6}, {65, 95, -6}, {97, 122, 41}, },
            {},
            {{48, 57, 42}, {62, 62, 43}, {65, 90, 44}, {95, 95, 42}, {97, 122, 44}, },
            {{48, 57, 21}, {65, 90, 21}, {95, 95, 21}, {97, 122, 21}, },
            {{36, 122, -20}, },
            {{36, 36, 16}, {48, 57, 45}, {58, 90, -20}, {95, 95, 46}, {97, 122, 47}, },
            {{36, 95, -25}, {97, 110, 47}, {111, 111, 48}, {112, 122, 47}, },
            {{36, 95, -25}, {97, 109, 47}, {110, 110, 49}, {111, 119, 47}, {120, 120, 50}, {121, 122, 47}, },
            {{36, 109, -27}, {110, 110, 51}, {111, 122, 47}, },
            {{36, 95, -25}, {97, 97, 52}, {98, 122, 47}, },
            {{36, 110, -26}, {111, 111, 53}, {112, 122, 47}, },
            {{36, 95, -25}, {97, 100, 47}, {101, 101, 54}, {102, 122, 47}, },
            {{48, 122, -10}, },
            {{48, 62, -11}, {65, 90, 31}, {95, 95, 31}, {97, 122, 31}, },
            {},
            {{48, 57, 55}, {62, 62, 56}, {65, 90, 55}, {95, 95, 31}, {97, 122, 55}, },
            {{48, 122, -13}, },
            {{48, 95, -10}, {97, 122, 57}, },
            {{48, 122, -13}, },
            {},
            {},
            {{41, 95, -19}, {97, 122, 39}, },
            {{41, 41, 58}, {48, 57, 59}, {65, 90, 39}, {95, 95, 60}, {97, 122, 61}, },
            {{36, 122, -20}, },
            {{48, 62, -22}, {65, 90, 42}, {95, 95, 42}, {97, 122, 42}, },
            {},
            {{48, 57, 62}, {62, 62, 63}, {65, 90, 62}, {95, 95, 42}, {97, 122, 62}, },
            {{36, 122, -25}, },
            {{36, 95, -20}, {97, 122, 64}, },
            {{36, 122, -25}, },
            {{36, 95, -25}, {97, 108, 47}, {109, 109, 65}, {110, 122, 47}, },
            {{36, 95, -25}, {97, 99, 47}, {100, 100, 66}, {101, 122, 47}, },
            {{36, 95, -25}, {97, 111, 47}, {112, 112, 67}, {113, 122, 47}, },
            {{36, 95, -25}, {97, 114, 47}, {115, 115, 68}, {116, 122, 47}, },
            {{36, 95, -25}, {97, 98, 47}, {99, 99, 69}, {100, 122, 47}, },
            {{36, 90, -25}, {95, 95, 70}, {97, 122, 47}, },
            {{36, 95, -25}, {97, 119, 47}, {120, 120, 71}, {121, 122, 47}, },
            {{48, 122, -35}, },
            {},
            {{48, 57, 72}, {65, 95, -13}, {97, 122, 73}, },
            {},
            {{41, 122, -42}, },
            {{41, 95, -19}, {97, 122, 74}, },
            {{41, 122, -42}, },
            {{48, 122, -46}, },
            {},
            {{36, 36, 16}, {48, 57, 75}, {58, 95, -25}, {97, 122, 76}, },
            {{36, 108, -50}, {109, 109, 77}, {110, 122, 47}, },
            {{36, 36, 78}, {48, 57, 45}, {58, 58, 79}, {65, 122, -25}, },
            {{36, 95, -25}, {97, 97, 80}, {98, 122, 47}, },
            {{36, 100, -31}, {101, 101, 81}, {102, 122, 47}, },
            {{36, 95, -25}, {97, 113, 47}, {114, 114, 82}, {115, 122, 47}, },
            {{36, 95, -20}, {97, 100, 64}, {101, 101, 83}, {102, 122, 64}, },
            {{36, 95, -25}, {97, 115, 47}, {116, 116, 84}, {117, 122, 47}, },
            {{48, 122, -59}, },
            {{48, 122, -59}, },
            {{41, 41, 58}, {48, 57, 85}, {65, 95, -42}, {97, 122, 86}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 100, -31}, {101, 101, 87}, {102, 122, 47}, },
            {{9, 9, 88}, {10, 12, 89}, {13, 13, 90}, {32, 32, 88}, },
            {},
            {{36, 109, -27}, {110, 110, 91}, {111, 122, 47}, },
            {{36, 113, -71}, {114, 114, 92}, {115, 122, 47}, },
            {{36, 110, -26}, {111, 111, 93}, {112, 122, 47}, },
            {{36, 95, -66}, {97, 110, 76}, {111, 111, 94}, {112, 122, 76}, },
            {{36, 57, -25}, {58, 58, 95}, {65, 122, -25}, },
            {{41, 122, -76}, },
            {{41, 122, -76}, },
            {{36, 109, -27}, {110, 110, 96}, {111, 122, 47}, },
            {{9, 32, -80}, },
            {},
            {{10, 10, 97}, },
            {{36, 99, -51}, {100, 100, 98}, {101, 122, 47}, },
            {{36, 115, -73}, {116, 116, 99}, {117, 122, 47}, },
            {{36, 57, -25}, {58, 58, 100}, {65, 122, -25}, },
            {{36, 95, -66}, {97, 107, 76}, {108, 108, 101}, {109, 122, 76}, },
            {},
            {{36, 115, -73}, {116, 116, 102}, {117, 122, 47}, },
            {},
            {{36, 57, -25}, {58, 58, 103}, {65, 122, -25}, },
            {{36, 57, -25}, {58, 58, 104}, {65, 122, -25}, },
            {},
            {{36, 36, 105}, {48, 122, -66}, },
            {{36, 36, 106}, {48, 57, 45}, {58, 58, 107}, {65, 122, -25}, },
            {},
            {},
            {{9, 9, 108}, {10, 12, 109}, {13, 13, 110}, {32, 32, 108}, },
            {},
            {},
            {{9, 32, -107}, },
            {},
            {{10, 10, 111}, },
            {},
        }
        { // COMMAND
            {{0, 8, 1}, {9, 13, 2}, {14, 25, 1}, {26, 26, 3}, {27, 31, 1}, {32, 32, 2}, {33, 33, 1}, {34, 34, 4}, {35, 35, 1}, {36, 36, 5}, {37, 39, 1}, {40, 40, 6}, {41, 41, 7}, {42, 43, 1}, {44, 44, 8}, {45, 47, 1}, {48, 57, 9}, {58, 59, 1}, {60, 60, 10}, {61, 61, 11}, {62, 64, 1}, {65, 90, 9}, {91, 94, 1}, {95, 95, 9}, {96, 96, 1}, {97, 122, 12}, {123, 65535, 1}, },
            {},
            {{9, 13, 13}, {32, 32, 13}, },
            {},
            {},
            {{9, 9, 14}, {10, 12, 15}, {13, 13, 16}, {32, 32, 14}, {36, 36, 17}, {40, 40, 18}, {48, 57, 19}, {58, 58, 20}, {60, 60, 21}, {65, 90, 22}, {95, 95, 23}, {97, 98, 24}, {99, 99, 25}, {100, 100, 24}, {101, 101, 26}, {102, 104, 24}, {105, 105, 27}, {106, 108, 24}, {109, 109, 28}, {110, 110, 29}, {111, 115, 24}, {116, 116, 30}, {117, 122, 24}, },
            {},
            {},
            {},
            {{48, 57, 31}, {65, 90, 31}, {95, 95, 31}, {97, 122, 31}, },
            {{48, 57, 32}, {62, 62, 33}, {65, 90, 34}, {95, 95, 32}, {97, 122, 34}, },
            {},
            {{48, 57, 35}, {65, 90, 31}, {95, 95, 36}, {97, 122, 37}, },
            {{9, 32, -4}, },
            {{9, 32, -7}, },
            {},
            {{10, 10, 38}, },
            {},
            {{41, 41, 39}, {48, 57, 40}, {65, 90, 40}, {95, 95, 40}, {97, 122, 41}, },
            {{36, 36, 17}, {48, 58, -7}, {65, 95, -7}, {97, 122, 42}, },
            {},
            {{48, 57, 43}, {62, 62, 44}, {65, 90, 45}, {95, 95, 43}, {97, 122, 45}, },
            {{48, 57, 22}, {65, 90, 22}, {95, 95, 22}, {97, 122, 22}, },
            {{36, 122, -21}, },
            {{36, 36, 17}, {48, 57, 46}, {58, 90, -21}, {95, 95, 47}, {97, 122, 48}, },
            {{36, 95, -26}, {97, 110, 48}, {111, 111, 49}, {112, 122, 48}, },
            {{36, 95, -26}, {97, 109, 48}, {110, 110, 50}, {111, 119, 48}, {120, 120, 51}, {121, 122, 48}, },
            {{36, 109, -28}, {110, 110, 52}, {111, 122, 48}, },
            {{36, 95, -26}, {97, 97, 53}, {98, 122, 48}, },
            {{36, 110, -27}, {111, 111, 54}, {112, 122, 48}, },
            {{36, 95, -26}, {97, 100, 48}, {101, 101, 55}, {102, 122, 48}, },
            {{48, 122, -11}, },
            {{48, 62, -12}, {65, 90, 32}, {95, 95, 32}, {97, 122, 32}, },
            {},
            {{48, 57, 56}, {62, 62, 57}, {65, 90, 56}, {95, 95, 32}, {97, 122, 56}, },
            {{48, 122, -14}, },
            {{48, 95, -11}, {97, 122, 58}, },
            {{48, 122, -14}, },
            {},
            {},
            {{41, 95, -20}, {97, 122, 40}, },
            {{41, 41, 59}, {48, 57, 60}, {65, 90, 40}, {95, 95, 61}, {97, 122, 62}, },
            {{36, 122, -21}, },
            {{48, 62, -23}, {65, 90, 43}, {95, 95, 43}, {97, 122, 43}, },
            {},
            {{48, 57, 63}, {62, 62, 64}, {65, 90, 63}, {95, 95, 43}, {97, 122, 63}, },
            {{36, 122, -26}, },
            {{36, 95, -21}, {97, 122, 65}, },
            {{36, 122, -26}, },
            {{36, 95, -26}, {97, 108, 48}, {109, 109, 66}, {110, 122, 48}, },
            {{36, 95, -26}, {97, 99, 48}, {100, 100, 67}, {101, 122, 48}, },
            {{36, 95, -26}, {97, 111, 48}, {112, 112, 68}, {113, 122, 48}, },
            {{36, 95, -26}, {97, 114, 48}, {115, 115, 69}, {116, 122, 48}, },
            {{36, 95, -26}, {97, 98, 48}, {99, 99, 70}, {100, 122, 48}, },
            {{36, 90, -26}, {95, 95, 71}, {97, 122, 48}, },
            {{36, 95, -26}, {97, 119, 48}, {120, 120, 72}, {121, 122, 48}, },
            {{48, 122, -36}, },
            {},
            {{48, 57, 73}, {65, 95, -14}, {97, 122, 74}, },
            {},
            {{41, 122, -43}, },
            {{41, 95, -20}, {97, 122, 75}, },
            {{41, 122, -43}, },
            {{48, 122, -47}, },
            {},
            {{36, 36, 17}, {48, 57, 76}, {58, 95, -26}, {97, 122, 77}, },
            {{36, 108, -51}, {109, 109, 78}, {110, 122, 48}, },
            {{36, 36, 79}, {48, 57, 46}, {58, 58, 80}, {65, 122, -26}, },
            {{36, 95, -26}, {97, 97, 81}, {98, 122, 48}, },
            {{36, 100, -32}, {101, 101, 82}, {102, 122, 48}, },
            {{36, 95, -26}, {97, 113, 48}, {114, 114, 83}, {115, 122, 48}, },
            {{36, 95, -21}, {97, 100, 65}, {101, 101, 84}, {102, 122, 65}, },
            {{36, 95, -26}, {97, 115, 48}, {116, 116, 85}, {117, 122, 48}, },
            {{48, 122, -60}, },
            {{48, 122, -60}, },
            {{41, 41, 59}, {48, 57, 86}, {65, 95, -43}, {97, 122, 87}, },
            {{36, 122, -67}, },
            {{36, 122, -67}, },
            {{36, 100, -32}, {101, 101, 88}, {102, 122, 48}, },
            {{9, 9, 89}, {10, 12, 90}, {13, 13, 91}, {32, 32, 89}, },
            {},
            {{36, 109, -28}, {110, 110, 92}, {111, 122, 48}, },
            {{36, 113, -72}, {114, 114, 93}, {115, 122, 48}, },
            {{36, 110, -27}, {111, 111, 94}, {112, 122, 48}, },
            {{36, 95, -67}, {97, 110, 77}, {111, 111, 95}, {112, 122, 77}, },
            {{36, 57, -26}, {58, 58, 96}, {65, 122, -26}, },
            {{41, 122, -77}, },
            {{41, 122, -77}, },
            {{36, 109, -28}, {110, 110, 97}, {111, 122, 48}, },
            {{9, 32, -81}, },
            {},
            {{10, 10, 98}, },
            {{36, 99, -52}, {100, 100, 99}, {101, 122, 48}, },
            {{36, 115, -74}, {116, 116, 100}, {117, 122, 48}, },
            {{36, 57, -26}, {58, 58, 101}, {65, 122, -26}, },
            {{36, 95, -67}, {97, 107, 77}, {108, 108, 102}, {109, 122, 77}, },
            {},
            {{36, 115, -74}, {116, 116, 103}, {117, 122, 48}, },
            {},
            {{36, 57, -26}, {58, 58, 104}, {65, 122, -26}, },
            {{36, 57, -26}, {58, 58, 105}, {65, 122, -26}, },
            {},
            {{36, 36, 106}, {48, 122, -67}, },
            {{36, 36, 107}, {48, 57, 46}, {58, 58, 108}, {65, 122, -26}, },
            {},
            {},
            {{9, 9, 109}, {10, 12, 110}, {13, 13, 111}, {32, 32, 109}, },
            {},
            {},
            {{9, 32, -108}, },
            {},
            {{10, 10, 112}, },
            {},
        }
        { // TEXT
            {{0, 8, 1}, {9, 9, 2}, {10, 12, 3}, {13, 13, 4}, {14, 25, 1}, {26, 26, 5}, {27, 31, 1}, {32, 35, 2}, {36, 36, 6}, {37, 91, 2}, {92, 92, 7}, {93, 126, 2}, {127, 65535, 1}, },
            {},
            {{9, 9, 8}, {32, 35, 8}, {37, 91, 8}, {93, 126, 8}, },
            {},
            {{10, 10, 9}, },
            {},
            {{9, 9, 10}, {10, 12, 11}, {13, 13, 12}, {32, 32, 10}, {36, 36, 13}, {40, 40, 14}, {48, 57, 15}, {58, 58, 16}, {60, 60, 17}, {65, 90, 18}, {95, 95, 19}, {97, 98, 20}, {99, 99, 21}, {100, 100, 20}, {101, 101, 22}, {102, 104, 20}, {105, 105, 23}, {106, 108, 20}, {109, 109, 24}, {110, 110, 25}, {111, 115, 20}, {116, 116, 26}, {117, 122, 20}, },
            {{36, 36, 27}, {92, 92, 27}, },
            {{9, 126, -4}, },
            {},
            {{9, 32, -8}, },
            {},
            {{10, 10, 28}, },
            {},
            {{41, 41, 29}, {48, 57, 30}, {65, 90, 30}, {95, 95, 30}, {97, 122, 31}, },
            {{36, 36, 13}, {48, 58, -8}, {65, 95, -8}, {97, 122, 32}, },
            {},
            {{48, 57, 33}, {62, 62, 34}, {65, 90, 35}, {95, 95, 33}, {97, 122, 35}, },
            {{48, 57, 18}, {65, 90, 18}, {95, 95, 18}, {97, 122, 18}, },
            {{36, 122, -17}, },
            {{36, 36, 13}, {48, 57, 36}, {58, 90, -17}, {95, 95, 37}, {97, 122, 38}, },
            {{36, 95, -22}, {97, 110, 38}, {111, 111, 39}, {112, 122, 38}, },
            {{36, 95, -22}, {97, 109, 38}, {110, 110, 40}, {111, 119, 38}, {120, 120, 41}, {121, 122, 38}, },
            {{36, 109, -24}, {110, 110, 42}, {111, 122, 38}, },
            {{36, 95, -22}, {97, 97, 43}, {98, 122, 38}, },
            {{36, 110, -23}, {111, 111, 44}, {112, 122, 38}, },
            {{36, 95, -22}, {97, 100, 38}, {101, 101, 45}, {102, 122, 38}, },
            {},
            {},
            {},
            {{41, 95, -16}, {97, 122, 30}, },
            {{41, 41, 46}, {48, 57, 47}, {65, 90, 30}, {95, 95, 48}, {97, 122, 49}, },
            {{36, 122, -17}, },
            {{48, 62, -19}, {65, 90, 33}, {95, 95, 33}, {97, 122, 33}, },
            {},
            {{48, 57, 50}, {62, 62, 51}, {65, 90, 50}, {95, 95, 33}, {97, 122, 50}, },
            {{36, 122, -22}, },
            {{36, 95, -17}, {97, 122, 52}, },
            {{36, 122, -22}, },
            {{36, 95, -22}, {97, 108, 38}, {109, 109, 53}, {110, 122, 38}, },
            {{36, 95, -22}, {97, 99, 38}, {100, 100, 54}, {101, 122, 38}, },
            {{36, 95, -22}, {97, 111, 38}, {112, 112, 55}, {113, 122, 38}, },
            {{36, 95, -22}, {97, 114, 38}, {115, 115, 56}, {116, 122, 38}, },
            {{36, 95, -22}, {97, 98, 38}, {99, 99, 57}, {100, 122, 38}, },
            {{36, 90, -22}, {95, 95, 58}, {97, 122, 38}, },
            {{36, 95, -22}, {97, 119, 38}, {120, 120, 59}, {121, 122, 38}, },
            {},
            {{41, 122, -33}, },
            {{41, 95, -16}, {97, 122, 60}, },
            {{41, 122, -33}, },
            {{48, 122, -37}, },
            {},
            {{36, 36, 13}, {48, 57, 61}, {58, 95, -22}, {97, 122, 62}, },
            {{36, 108, -41}, {109, 109, 63}, {110, 122, 38}, },
            {{36, 36, 64}, {48, 57, 36}, {58, 58, 65}, {65, 122, -22}, },
            {{36, 95, -22}, {97, 97, 66}, {98, 122, 38}, },
            {{36, 100, -28}, {101, 101, 67}, {102, 122, 38}, },
            {{36, 95, -22}, {97, 113, 38}, {114, 114, 68}, {115, 122, 38}, },
            {{36, 95, -17}, {97, 100, 52}, {101, 101, 69}, {102, 122, 52}, },
            {{36, 95, -22}, {97, 115, 38}, {116, 116, 70}, {117, 122, 38}, },
            {{41, 41, 46}, {48, 57, 71}, {65, 95, -33}, {97, 122, 72}, },
            {{36, 122, -54}, },
            {{36, 122, -54}, },
            {{36, 100, -28}, {101, 101, 73}, {102, 122, 38}, },
            {{9, 9, 74}, {10, 12, 75}, {13, 13, 76}, {32, 32, 74}, },
            {},
            {{36, 109, -24}, {110, 110, 77}, {111, 122, 38}, },
            {{36, 113, -59}, {114, 114, 78}, {115, 122, 38}, },
            {{36, 110, -23}, {111, 111, 79}, {112, 122, 38}, },
            {{36, 95, -54}, {97, 110, 62}, {111, 111, 80}, {112, 122, 62}, },
            {{36, 57, -22}, {58, 58, 81}, {65, 122, -22}, },
            {{41, 122, -62}, },
            {{41, 122, -62}, },
            {{36, 109, -24}, {110, 110, 82}, {111, 122, 38}, },
            {{9, 32, -66}, },
            {},
            {{10, 10, 83}, },
            {{36, 99, -42}, {100, 100, 84}, {101, 122, 38}, },
            {{36, 115, -61}, {116, 116, 85}, {117, 122, 38}, },
            {{36, 57, -22}, {58, 58, 86}, {65, 122, -22}, },
            {{36, 95, -54}, {97, 107, 62}, {108, 108, 87}, {109, 122, 62}, },
            {},
            {{36, 115, -61}, {116, 116, 88}, {117, 122, 38}, },
            {},
            {{36, 57, -22}, {58, 58, 89}, {65, 122, -22}, },
            {{36, 57, -22}, {58, 58, 90}, {65, 122, -22}, },
            {},
            {{36, 36, 91}, {48, 122, -54}, },
            {{36, 36, 92}, {48, 57, 36}, {58, 58, 93}, {65, 122, -22}, },
            {},
            {},
            {{9, 9, 94}, {10, 12, 95}, {13, 13, 96}, {32, 32, 94}, },
            {},
            {},
            {{9, 32, -93}, },
            {},
            {{10, 10, 97}, },
            {},
        }
        { // SHORT_COMMENT
            {{0, 8, 1}, {9, 9, 2}, {10, 25, 1}, {26, 26, 3}, {27, 31, 1}, {32, 35, 2}, {36, 36, 4}, {37, 126, 2}, {127, 65535, 1}, },
            {},
            {{9, 9, 5}, {32, 35, 5}, {37, 126, 5}, },
            {},
            {{9, 9, 6}, {10, 12, 7}, {13, 13, 8}, {32, 32, 6}, {36, 36, 9}, {40, 40, 10}, {48, 57, 11}, {58, 58, 12}, {60, 60, 13}, {65, 90, 14}, {95, 95, 15}, {97, 98, 16}, {99, 99, 17}, {100, 100, 16}, {101, 101, 18}, {102, 104, 16}, {105, 105, 19}, {106, 108, 16}, {109, 109, 20}, {110, 110, 21}, {111, 115, 16}, {116, 116, 22}, {117, 122, 16}, },
            {{9, 126, -4}, },
            {{9, 32, -6}, },
            {},
            {{10, 10, 23}, },
            {},
            {{41, 41, 24}, {48, 57, 25}, {65, 90, 25}, {95, 95, 25}, {97, 122, 26}, },
            {{36, 36, 9}, {48, 58, -6}, {65, 95, -6}, {97, 122, 27}, },
            {},
            {{48, 57, 28}, {62, 62, 29}, {65, 90, 30}, {95, 95, 28}, {97, 122, 30}, },
            {{48, 57, 14}, {65, 90, 14}, {95, 95, 14}, {97, 122, 14}, },
            {{36, 122, -13}, },
            {{36, 36, 9}, {48, 57, 31}, {58, 90, -13}, {95, 95, 32}, {97, 122, 33}, },
            {{36, 95, -18}, {97, 110, 33}, {111, 111, 34}, {112, 122, 33}, },
            {{36, 95, -18}, {97, 109, 33}, {110, 110, 35}, {111, 119, 33}, {120, 120, 36}, {121, 122, 33}, },
            {{36, 109, -20}, {110, 110, 37}, {111, 122, 33}, },
            {{36, 95, -18}, {97, 97, 38}, {98, 122, 33}, },
            {{36, 110, -19}, {111, 111, 39}, {112, 122, 33}, },
            {{36, 95, -18}, {97, 100, 33}, {101, 101, 40}, {102, 122, 33}, },
            {},
            {},
            {{41, 95, -12}, {97, 122, 25}, },
            {{41, 41, 41}, {48, 57, 42}, {65, 90, 25}, {95, 95, 43}, {97, 122, 44}, },
            {{36, 122, -13}, },
            {{48, 62, -15}, {65, 90, 28}, {95, 95, 28}, {97, 122, 28}, },
            {},
            {{48, 57, 45}, {62, 62, 46}, {65, 90, 45}, {95, 95, 28}, {97, 122, 45}, },
            {{36, 122, -18}, },
            {{36, 95, -13}, {97, 122, 47}, },
            {{36, 122, -18}, },
            {{36, 95, -18}, {97, 108, 33}, {109, 109, 48}, {110, 122, 33}, },
            {{36, 95, -18}, {97, 99, 33}, {100, 100, 49}, {101, 122, 33}, },
            {{36, 95, -18}, {97, 111, 33}, {112, 112, 50}, {113, 122, 33}, },
            {{36, 95, -18}, {97, 114, 33}, {115, 115, 51}, {116, 122, 33}, },
            {{36, 95, -18}, {97, 98, 33}, {99, 99, 52}, {100, 122, 33}, },
            {{36, 90, -18}, {95, 95, 53}, {97, 122, 33}, },
            {{36, 95, -18}, {97, 119, 33}, {120, 120, 54}, {121, 122, 33}, },
            {},
            {{41, 122, -28}, },
            {{41, 95, -12}, {97, 122, 55}, },
            {{41, 122, -28}, },
            {{48, 122, -32}, },
            {},
            {{36, 36, 9}, {48, 57, 56}, {58, 95, -18}, {97, 122, 57}, },
            {{36, 108, -36}, {109, 109, 58}, {110, 122, 33}, },
            {{36, 36, 59}, {48, 57, 31}, {58, 58, 60}, {65, 122, -18}, },
            {{36, 95, -18}, {97, 97, 61}, {98, 122, 33}, },
            {{36, 100, -24}, {101, 101, 62}, {102, 122, 33}, },
            {{36, 95, -18}, {97, 113, 33}, {114, 114, 63}, {115, 122, 33}, },
            {{36, 95, -13}, {97, 100, 47}, {101, 101, 64}, {102, 122, 47}, },
            {{36, 95, -18}, {97, 115, 33}, {116, 116, 65}, {117, 122, 33}, },
            {{41, 41, 41}, {48, 57, 66}, {65, 95, -28}, {97, 122, 67}, },
            {{36, 122, -49}, },
            {{36, 122, -49}, },
            {{36, 100, -24}, {101, 101, 68}, {102, 122, 33}, },
            {{9, 9, 69}, {10, 12, 70}, {13, 13, 71}, {32, 32, 69}, },
            {},
            {{36, 109, -20}, {110, 110, 72}, {111, 122, 33}, },
            {{36, 113, -54}, {114, 114, 73}, {115, 122, 33}, },
            {{36, 110, -19}, {111, 111, 74}, {112, 122, 33}, },
            {{36, 95, -49}, {97, 110, 57}, {111, 111, 75}, {112, 122, 57}, },
            {{36, 57, -18}, {58, 58, 76}, {65, 122, -18}, },
            {{41, 122, -57}, },
            {{41, 122, -57}, },
            {{36, 109, -20}, {110, 110, 77}, {111, 122, 33}, },
            {{9, 32, -61}, },
            {},
            {{10, 10, 78}, },
            {{36, 99, -37}, {100, 100, 79}, {101, 122, 33}, },
            {{36, 115, -56}, {116, 116, 80}, {117, 122, 33}, },
            {{36, 57, -18}, {58, 58, 81}, {65, 122, -18}, },
            {{36, 95, -49}, {97, 107, 57}, {108, 108, 82}, {109, 122, 57}, },
            {},
            {{36, 115, -56}, {116, 116, 83}, {117, 122, 33}, },
            {},
            {{36, 57, -18}, {58, 58, 84}, {65, 122, -18}, },
            {{36, 57, -18}, {58, 58, 85}, {65, 122, -18}, },
            {},
            {{36, 36, 86}, {48, 122, -49}, },
            {{36, 36, 87}, {48, 57, 31}, {58, 58, 88}, {65, 122, -18}, },
            {},
            {},
            {{9, 9, 89}, {10, 12, 90}, {13, 13, 91}, {32, 32, 89}, },
            {},
            {},
            {{9, 32, -88}, },
            {},
            {{10, 10, 92}, },
            {},
        }
        { // LONG_COMMENT
            {{0, 8, 1}, {9, 13, 2}, {14, 25, 1}, {26, 26, 3}, {27, 31, 1}, {32, 35, 2}, {36, 36, 4}, {37, 126, 2}, {127, 65535, 1}, },
            {},
            {{9, 13, 5}, {32, 35, 5}, {37, 126, 5}, },
            {},
            {{99, 99, 6}, {101, 101, 7}, },
            {{9, 126, -4}, },
            {{111, 111, 8}, },
            {{110, 110, 9}, },
            {{109, 109, 10}, },
            {{100, 100, 11}, },
            {{109, 109, 12}, },
            {{36, 36, 13}, },
            {{101, 101, 14}, },
            {{9, 9, 15}, {10, 12, 16}, {13, 13, 17}, {32, 32, 15}, },
            {{110, 110, 18}, },
            {{9, 32, -15}, },
            {},
            {{10, 10, 19}, },
            {{116, 116, 20}, },
            {},
            {{36, 36, 21}, },
            {},
        }
        { // STRING
            {{0, 8, 1}, {9, 9, 2}, {10, 25, 1}, {26, 26, 3}, {27, 31, 1}, {32, 33, 2}, {34, 34, 4}, {35, 35, 2}, {36, 36, 1}, {37, 91, 2}, {92, 92, 5}, {93, 126, 2}, {127, 65535, 1}, },
            {},
            {{9, 9, 6}, {32, 33, 6}, {35, 35, 6}, {37, 91, 6}, {93, 126, 6}, },
            {},
            {},
            {{34, 34, 7}, {36, 36, 7}, {92, 92, 7}, {110, 110, 7}, },
            {{9, 126, -4}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // TOP_LEVEL
        {-1, 30, 25, 29, 6, 21, 22, 23, 20, 20, 24, 19, 25, -1, 6, 6, 11, 18, 18, 11, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 19, 20, 19, 6, 18, 18, 18, 18, 18, 18, 18, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 20, 19, 19, 17, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 19, 19, 18, 17, 17, 17, 8, 4, 17, 17, 17, 17, 17, 18, 18, 17, -1, 8, 8, 17, 17, 17, 17, 1, 17, 8, 17, 17, 0, 17, 17, 2, 3, 10, 7, 5, -1, 9, 9, 9, },
        // COMMAND
        {-1, 30, 25, 29, 26, 6, 21, 22, 23, 20, 20, 24, 19, 25, -1, 6, 6, 11, 18, 18, 11, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 19, 20, 19, 6, 18, 18, 18, 18, 18, 18, 18, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 20, 19, 19, 17, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 19, 19, 18, 17, 17, 17, 8, 4, 17, 17, 17, 17, 17, 18, 18, 17, -1, 8, 8, 17, 17, 17, 17, 1, 17, 8, 17, 17, 0, 17, 17, 2, 3, 10, 7, 5, -1, 9, 9, 9, },
        // TEXT
        {-1, 30, 14, 15, 15, 29, 6, 30, 14, 15, -1, 6, 6, 11, 18, 18, 11, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 16, 6, 18, 18, 18, 18, 18, 18, 18, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 18, 17, 17, 17, 8, 4, 17, 17, 17, 17, 17, 18, 18, 17, -1, 8, 8, 17, 17, 17, 17, 1, 17, 8, 17, 17, 0, 17, 17, 2, 3, 10, 7, 5, -1, 9, 9, 9, },
        // SHORT_COMMENT
        {-1, 30, 12, 29, 6, 12, -1, 6, 6, 11, 18, 18, 11, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 6, 18, 18, 18, 18, 18, 18, 18, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 18, 17, 17, 17, 8, 4, 17, 17, 17, 17, 17, 18, 18, 17, -1, 8, 8, 17, 17, 17, 17, 1, 17, 8, 17, 17, 0, 17, 17, 2, 3, 10, 7, 5, -1, 9, 9, 9, },
        // LONG_COMMENT
        {-1, 30, 13, 29, 13, 13, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 8, 8, -1, 8, -1, 7, },
        // STRING
        {-1, 30, 27, 29, 26, 30, 27, 28, },

    };*/

    public static class State
    {
        public final static State TOP_LEVEL = new State(0);
        public final static State COMMAND = new State(1);
        public final static State TEXT = new State(2);
        public final static State SHORT_COMMENT = new State(3);
        public final static State LONG_COMMENT = new State(4);
        public final static State STRING = new State(5);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}

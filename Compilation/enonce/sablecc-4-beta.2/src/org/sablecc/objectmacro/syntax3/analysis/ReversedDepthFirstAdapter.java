/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.syntax3.analysis;

import java.util.*;
import org.sablecc.objectmacro.syntax3.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPSourceFile().apply(this);
        outStart(node);
    }

    public void inASourceFile(ASourceFile node)
    {
        defaultIn(node);
    }

    public void outASourceFile(ASourceFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASourceFile(ASourceFile node)
    {
        inASourceFile(node);
        {
            List<PSourceFilePart> copy = new ArrayList<PSourceFilePart>(node.getParts());
            Collections.reverse(copy);
            for(PSourceFilePart e : copy)
            {
                e.apply(this);
            }
        }
        outASourceFile(node);
    }

    public void inAMacroSourceFilePart(AMacroSourceFilePart node)
    {
        defaultIn(node);
    }

    public void outAMacroSourceFilePart(AMacroSourceFilePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMacroSourceFilePart(AMacroSourceFilePart node)
    {
        inAMacroSourceFilePart(node);
        if(node.getMacro() != null)
        {
            node.getMacro().apply(this);
        }
        outAMacroSourceFilePart(node);
    }

    public void inATextBlockSourceFilePart(ATextBlockSourceFilePart node)
    {
        defaultIn(node);
    }

    public void outATextBlockSourceFilePart(ATextBlockSourceFilePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextBlockSourceFilePart(ATextBlockSourceFilePart node)
    {
        inATextBlockSourceFilePart(node);
        if(node.getTextBlock() != null)
        {
            node.getTextBlock().apply(this);
        }
        outATextBlockSourceFilePart(node);
    }

    public void inAMacro(AMacro node)
    {
        defaultIn(node);
    }

    public void outAMacro(AMacro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMacro(AMacro node)
    {
        inAMacro(node);
        if(node.getRepeatName() != null)
        {
            node.getRepeatName().apply(this);
        }
        {
            List<PMacroBodyPart> copy = new ArrayList<PMacroBodyPart>(node.getParts());
            Collections.reverse(copy);
            for(PMacroBodyPart e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParam> copy = new ArrayList<PParam>(node.getParams());
            Collections.reverse(copy);
            for(PParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAMacro(node);
    }

    public void inATextMacroBodyPart(ATextMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextMacroBodyPart(ATextMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextMacroBodyPart(ATextMacroBodyPart node)
    {
        inATextMacroBodyPart(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextMacroBodyPart(node);
    }

    public void inAEolMacroBodyPart(AEolMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outAEolMacroBodyPart(AEolMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEolMacroBodyPart(AEolMacroBodyPart node)
    {
        inAEolMacroBodyPart(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAEolMacroBodyPart(node);
    }

    public void inAEscapeMacroBodyPart(AEscapeMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outAEscapeMacroBodyPart(AEscapeMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscapeMacroBodyPart(AEscapeMacroBodyPart node)
    {
        inAEscapeMacroBodyPart(node);
        if(node.getEscape() != null)
        {
            node.getEscape().apply(this);
        }
        outAEscapeMacroBodyPart(node);
    }

    public void inAVarMacroBodyPart(AVarMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outAVarMacroBodyPart(AVarMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarMacroBodyPart(AVarMacroBodyPart node)
    {
        inAVarMacroBodyPart(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarMacroBodyPart(node);
    }

    public void inAExpandMacroBodyPart(AExpandMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outAExpandMacroBodyPart(AExpandMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpandMacroBodyPart(AExpandMacroBodyPart node)
    {
        inAExpandMacroBodyPart(node);
        if(node.getExpand() != null)
        {
            node.getExpand().apply(this);
        }
        outAExpandMacroBodyPart(node);
    }

    public void inAMacroMacroBodyPart(AMacroMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outAMacroMacroBodyPart(AMacroMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMacroMacroBodyPart(AMacroMacroBodyPart node)
    {
        inAMacroMacroBodyPart(node);
        if(node.getMacro() != null)
        {
            node.getMacro().apply(this);
        }
        outAMacroMacroBodyPart(node);
    }

    public void inATextInsertMacroBodyPart(ATextInsertMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextInsertMacroBodyPart(ATextInsertMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextInsertMacroBodyPart(ATextInsertMacroBodyPart node)
    {
        inATextInsertMacroBodyPart(node);
        if(node.getTextInsert() != null)
        {
            node.getTextInsert().apply(this);
        }
        outATextInsertMacroBodyPart(node);
    }

    public void inATextBlockMacroBodyPart(ATextBlockMacroBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextBlockMacroBodyPart(ATextBlockMacroBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextBlockMacroBodyPart(ATextBlockMacroBodyPart node)
    {
        inATextBlockMacroBodyPart(node);
        if(node.getTextBlock() != null)
        {
            node.getTextBlock().apply(this);
        }
        outATextBlockMacroBodyPart(node);
    }

    public void inATextBlock(ATextBlock node)
    {
        defaultIn(node);
    }

    public void outATextBlock(ATextBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextBlock(ATextBlock node)
    {
        inATextBlock(node);
        if(node.getRepeatName() != null)
        {
            node.getRepeatName().apply(this);
        }
        {
            List<PTextBlockBodyPart> copy = new ArrayList<PTextBlockBodyPart>(node.getParts());
            Collections.reverse(copy);
            for(PTextBlockBodyPart e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParam> copy = new ArrayList<PParam>(node.getParams());
            Collections.reverse(copy);
            for(PParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATextBlock(node);
    }

    public void inATextTextBlockBodyPart(ATextTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextTextBlockBodyPart(ATextTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextTextBlockBodyPart(ATextTextBlockBodyPart node)
    {
        inATextTextBlockBodyPart(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextTextBlockBodyPart(node);
    }

    public void inAEolTextBlockBodyPart(AEolTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outAEolTextBlockBodyPart(AEolTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEolTextBlockBodyPart(AEolTextBlockBodyPart node)
    {
        inAEolTextBlockBodyPart(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAEolTextBlockBodyPart(node);
    }

    public void inAEscapeTextBlockBodyPart(AEscapeTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outAEscapeTextBlockBodyPart(AEscapeTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscapeTextBlockBodyPart(AEscapeTextBlockBodyPart node)
    {
        inAEscapeTextBlockBodyPart(node);
        if(node.getEscape() != null)
        {
            node.getEscape().apply(this);
        }
        outAEscapeTextBlockBodyPart(node);
    }

    public void inAVarTextBlockBodyPart(AVarTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outAVarTextBlockBodyPart(AVarTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTextBlockBodyPart(AVarTextBlockBodyPart node)
    {
        inAVarTextBlockBodyPart(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTextBlockBodyPart(node);
    }

    public void inATextInsertTextBlockBodyPart(ATextInsertTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextInsertTextBlockBodyPart(ATextInsertTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextInsertTextBlockBodyPart(ATextInsertTextBlockBodyPart node)
    {
        inATextInsertTextBlockBodyPart(node);
        if(node.getTextInsert() != null)
        {
            node.getTextInsert().apply(this);
        }
        outATextInsertTextBlockBodyPart(node);
    }

    public void inATextBlockTextBlockBodyPart(ATextBlockTextBlockBodyPart node)
    {
        defaultIn(node);
    }

    public void outATextBlockTextBlockBodyPart(ATextBlockTextBlockBodyPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextBlockTextBlockBodyPart(ATextBlockTextBlockBodyPart node)
    {
        inATextBlockTextBlockBodyPart(node);
        if(node.getTextBlock() != null)
        {
            node.getTextBlock().apply(this);
        }
        outATextBlockTextBlockBodyPart(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParam(node);
    }

    public void inAExpand(AExpand node)
    {
        defaultIn(node);
    }

    public void outAExpand(AExpand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpand(AExpand node)
    {
        inAExpand(node);
        {
            List<POption> copy = new ArrayList<POption>(node.getOptions());
            Collections.reverse(copy);
            for(POption e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMacroReference> copy = new ArrayList<PMacroReference>(node.getMacroReferences());
            Collections.reverse(copy);
            for(PMacroReference e : copy)
            {
                e.apply(this);
            }
        }
        outAExpand(node);
    }

    public void inAOption(AOption node)
    {
        defaultIn(node);
    }

    public void outAOption(AOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOption(AOption node)
    {
        inAOption(node);
        if(node.getStaticValue() != null)
        {
            node.getStaticValue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAOption(node);
    }

    public void inATextInsertStaticValue(ATextInsertStaticValue node)
    {
        defaultIn(node);
    }

    public void outATextInsertStaticValue(ATextInsertStaticValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextInsertStaticValue(ATextInsertStaticValue node)
    {
        inATextInsertStaticValue(node);
        if(node.getTextInsert() != null)
        {
            node.getTextInsert().apply(this);
        }
        outATextInsertStaticValue(node);
    }

    public void inAVarStaticValue(AVarStaticValue node)
    {
        defaultIn(node);
    }

    public void outAVarStaticValue(AVarStaticValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarStaticValue(AVarStaticValue node)
    {
        inAVarStaticValue(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarStaticValue(node);
    }

    public void inAStringStaticValue(AStringStaticValue node)
    {
        defaultIn(node);
    }

    public void outAStringStaticValue(AStringStaticValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringStaticValue(AStringStaticValue node)
    {
        inAStringStaticValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringStaticValue(node);
    }

    public void inAString(AString node)
    {
        defaultIn(node);
    }

    public void outAString(AString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAString(AString node)
    {
        inAString(node);
        {
            List<PStringPart> copy = new ArrayList<PStringPart>(node.getParts());
            Collections.reverse(copy);
            for(PStringPart e : copy)
            {
                e.apply(this);
            }
        }
        outAString(node);
    }

    public void inATextStringPart(ATextStringPart node)
    {
        defaultIn(node);
    }

    public void outATextStringPart(ATextStringPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextStringPart(ATextStringPart node)
    {
        inATextStringPart(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextStringPart(node);
    }

    public void inAEscapeStringPart(AEscapeStringPart node)
    {
        defaultIn(node);
    }

    public void outAEscapeStringPart(AEscapeStringPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscapeStringPart(AEscapeStringPart node)
    {
        inAEscapeStringPart(node);
        if(node.getEscape() != null)
        {
            node.getEscape().apply(this);
        }
        outAEscapeStringPart(node);
    }

    public void inAMacroReference(AMacroReference node)
    {
        defaultIn(node);
    }

    public void outAMacroReference(AMacroReference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMacroReference(AMacroReference node)
    {
        inAMacroReference(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAMacroReference(node);
    }

    public void inATextInsert(ATextInsert node)
    {
        defaultIn(node);
    }

    public void outATextInsert(ATextInsert node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextInsert(ATextInsert node)
    {
        inATextInsert(node);
        {
            List<PStaticValue> copy = new ArrayList<PStaticValue>(node.getStaticValues());
            Collections.reverse(copy);
            for(PStaticValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATextInsert(node);
    }
}

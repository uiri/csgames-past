/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.syntax3.node;

import java.util.*;
import org.sablecc.objectmacro.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AMacro extends PMacro
{
    private TIdentifier _name_;
    private final LinkedList<PParam> _params_ = new LinkedList<PParam>();
    private final LinkedList<PMacroBodyPart> _parts_ = new LinkedList<PMacroBodyPart>();
    private TIdentifier _repeatName_;

    public AMacro()
    {
        // Constructor
    }

    public AMacro(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") List<PParam> _params_,
        @SuppressWarnings("hiding") List<PMacroBodyPart> _parts_,
        @SuppressWarnings("hiding") TIdentifier _repeatName_)
    {
        // Constructor
        setName(_name_);

        setParams(_params_);

        setParts(_parts_);

        setRepeatName(_repeatName_);

    }

    @Override
    public Object clone()
    {
        return new AMacro(
            cloneNode(this._name_),
            cloneList(this._params_),
            cloneList(this._parts_),
            cloneNode(this._repeatName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMacro(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PParam> getParams()
    {
        return this._params_;
    }

    public void setParams(List<PParam> list)
    {
        this._params_.clear();
        this._params_.addAll(list);
        for(PParam e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMacroBodyPart> getParts()
    {
        return this._parts_;
    }

    public void setParts(List<PMacroBodyPart> list)
    {
        this._parts_.clear();
        this._parts_.addAll(list);
        for(PMacroBodyPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIdentifier getRepeatName()
    {
        return this._repeatName_;
    }

    public void setRepeatName(TIdentifier node)
    {
        if(this._repeatName_ != null)
        {
            this._repeatName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repeatName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._params_)
            + toString(this._parts_)
            + toString(this._repeatName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._params_.remove(child))
        {
            return;
        }

        if(this._parts_.remove(child))
        {
            return;
        }

        if(this._repeatName_ == child)
        {
            this._repeatName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PParam> i = this._params_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParam) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMacroBodyPart> i = this._parts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMacroBodyPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._repeatName_ == oldChild)
        {
            setRepeatName((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

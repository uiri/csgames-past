/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.intermediate.syntax3.node;

import org.sablecc.objectmacro.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AExpandInsert extends PExpandInsert
{
    private TString _name_;
    private PValue _none_;
    private PValue _separator_;
    private PValue _beforeFirst_;
    private PValue _afterLast_;
    private PValue _beforeOne_;
    private PValue _afterOne_;
    private PValue _beforeMany_;
    private PValue _afterMany_;

    public AExpandInsert()
    {
        // Constructor
    }

    public AExpandInsert(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") PValue _none_,
        @SuppressWarnings("hiding") PValue _separator_,
        @SuppressWarnings("hiding") PValue _beforeFirst_,
        @SuppressWarnings("hiding") PValue _afterLast_,
        @SuppressWarnings("hiding") PValue _beforeOne_,
        @SuppressWarnings("hiding") PValue _afterOne_,
        @SuppressWarnings("hiding") PValue _beforeMany_,
        @SuppressWarnings("hiding") PValue _afterMany_)
    {
        // Constructor
        setName(_name_);

        setNone(_none_);

        setSeparator(_separator_);

        setBeforeFirst(_beforeFirst_);

        setAfterLast(_afterLast_);

        setBeforeOne(_beforeOne_);

        setAfterOne(_afterOne_);

        setBeforeMany(_beforeMany_);

        setAfterMany(_afterMany_);

    }

    @Override
    public Object clone()
    {
        return new AExpandInsert(
            cloneNode(this._name_),
            cloneNode(this._none_),
            cloneNode(this._separator_),
            cloneNode(this._beforeFirst_),
            cloneNode(this._afterLast_),
            cloneNode(this._beforeOne_),
            cloneNode(this._afterOne_),
            cloneNode(this._beforeMany_),
            cloneNode(this._afterMany_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpandInsert(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PValue getNone()
    {
        return this._none_;
    }

    public void setNone(PValue node)
    {
        if(this._none_ != null)
        {
            this._none_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._none_ = node;
    }

    public PValue getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(PValue node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    public PValue getBeforeFirst()
    {
        return this._beforeFirst_;
    }

    public void setBeforeFirst(PValue node)
    {
        if(this._beforeFirst_ != null)
        {
            this._beforeFirst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beforeFirst_ = node;
    }

    public PValue getAfterLast()
    {
        return this._afterLast_;
    }

    public void setAfterLast(PValue node)
    {
        if(this._afterLast_ != null)
        {
            this._afterLast_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._afterLast_ = node;
    }

    public PValue getBeforeOne()
    {
        return this._beforeOne_;
    }

    public void setBeforeOne(PValue node)
    {
        if(this._beforeOne_ != null)
        {
            this._beforeOne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beforeOne_ = node;
    }

    public PValue getAfterOne()
    {
        return this._afterOne_;
    }

    public void setAfterOne(PValue node)
    {
        if(this._afterOne_ != null)
        {
            this._afterOne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._afterOne_ = node;
    }

    public PValue getBeforeMany()
    {
        return this._beforeMany_;
    }

    public void setBeforeMany(PValue node)
    {
        if(this._beforeMany_ != null)
        {
            this._beforeMany_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beforeMany_ = node;
    }

    public PValue getAfterMany()
    {
        return this._afterMany_;
    }

    public void setAfterMany(PValue node)
    {
        if(this._afterMany_ != null)
        {
            this._afterMany_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._afterMany_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._none_)
            + toString(this._separator_)
            + toString(this._beforeFirst_)
            + toString(this._afterLast_)
            + toString(this._beforeOne_)
            + toString(this._afterOne_)
            + toString(this._beforeMany_)
            + toString(this._afterMany_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._none_ == child)
        {
            this._none_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        if(this._beforeFirst_ == child)
        {
            this._beforeFirst_ = null;
            return;
        }

        if(this._afterLast_ == child)
        {
            this._afterLast_ = null;
            return;
        }

        if(this._beforeOne_ == child)
        {
            this._beforeOne_ = null;
            return;
        }

        if(this._afterOne_ == child)
        {
            this._afterOne_ = null;
            return;
        }

        if(this._beforeMany_ == child)
        {
            this._beforeMany_ = null;
            return;
        }

        if(this._afterMany_ == child)
        {
            this._afterMany_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        if(this._none_ == oldChild)
        {
            setNone((PValue) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((PValue) newChild);
            return;
        }

        if(this._beforeFirst_ == oldChild)
        {
            setBeforeFirst((PValue) newChild);
            return;
        }

        if(this._afterLast_ == oldChild)
        {
            setAfterLast((PValue) newChild);
            return;
        }

        if(this._beforeOne_ == oldChild)
        {
            setBeforeOne((PValue) newChild);
            return;
        }

        if(this._afterOne_ == oldChild)
        {
            setAfterOne((PValue) newChild);
            return;
        }

        if(this._beforeMany_ == oldChild)
        {
            setBeforeMany((PValue) newChild);
            return;
        }

        if(this._afterMany_ == oldChild)
        {
            setAfterMany((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

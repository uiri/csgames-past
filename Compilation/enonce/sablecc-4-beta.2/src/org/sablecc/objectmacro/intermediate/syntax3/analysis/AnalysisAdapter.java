/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.objectmacro.intermediate.syntax3.analysis;

import java.util.*;
import org.sablecc.objectmacro.intermediate.syntax3.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAIntermediateRepresentation(AIntermediateRepresentation node)
    {
        defaultCase(node);
    }

    public void caseAText(AText node)
    {
        defaultCase(node);
    }

    public void caseAMacro(AMacro node)
    {
        defaultCase(node);
    }

    public void caseAParamRef(AParamRef node)
    {
        defaultCase(node);
    }

    public void caseAExpandedMacro(AExpandedMacro node)
    {
        defaultCase(node);
    }

    public void caseAStringTextPart(AStringTextPart node)
    {
        defaultCase(node);
    }

    public void caseAEolTextPart(AEolTextPart node)
    {
        defaultCase(node);
    }

    public void caseAParamInsertTextPart(AParamInsertTextPart node)
    {
        defaultCase(node);
    }

    public void caseATextInsertTextPart(ATextInsertTextPart node)
    {
        defaultCase(node);
    }

    public void caseAStringMacroPart(AStringMacroPart node)
    {
        defaultCase(node);
    }

    public void caseAEolMacroPart(AEolMacroPart node)
    {
        defaultCase(node);
    }

    public void caseAParamInsertMacroPart(AParamInsertMacroPart node)
    {
        defaultCase(node);
    }

    public void caseATextInsertMacroPart(ATextInsertMacroPart node)
    {
        defaultCase(node);
    }

    public void caseAExpandInsertMacroPart(AExpandInsertMacroPart node)
    {
        defaultCase(node);
    }

    public void caseAExpandInsert(AExpandInsert node)
    {
        defaultCase(node);
    }

    public void caseATextInsert(ATextInsert node)
    {
        defaultCase(node);
    }

    public void caseAInlineTextValue(AInlineTextValue node)
    {
        defaultCase(node);
    }

    public void caseAParamInsertValue(AParamInsertValue node)
    {
        defaultCase(node);
    }

    public void caseATextInsertValue(ATextInsertValue node)
    {
        defaultCase(node);
    }

    public void caseAStringInlineText(AStringInlineText node)
    {
        defaultCase(node);
    }

    public void caseAEolInlineText(AEolInlineText node)
    {
        defaultCase(node);
    }

    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    public void caseTAfterLastKeyword(TAfterLastKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAfterManyKeyword(TAfterManyKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAfterOneKeyword(TAfterOneKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAncestorRefKeyword(TAncestorRefKeyword node)
    {
        defaultCase(node);
    }

    public void caseTArgKeyword(TArgKeyword node)
    {
        defaultCase(node);
    }

    public void caseTBeforeFirstKeyword(TBeforeFirstKeyword node)
    {
        defaultCase(node);
    }

    public void caseTBeforeManyKeyword(TBeforeManyKeyword node)
    {
        defaultCase(node);
    }

    public void caseTBeforeOneKeyword(TBeforeOneKeyword node)
    {
        defaultCase(node);
    }

    public void caseTContextNameKeyword(TContextNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTEolKeyword(TEolKeyword node)
    {
        defaultCase(node);
    }

    public void caseTExpandKeyword(TExpandKeyword node)
    {
        defaultCase(node);
    }

    public void caseTExpandInsertKeyword(TExpandInsertKeyword node)
    {
        defaultCase(node);
    }

    public void caseTExpandedMacroKeyword(TExpandedMacroKeyword node)
    {
        defaultCase(node);
    }

    public void caseTFalseKeyword(TFalseKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIsPublicKeyword(TIsPublicKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMacroKeyword(TMacroKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNameKeyword(TNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNoneKeyword(TNoneKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParamKeyword(TParamKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParamInsertKeyword(TParamInsertKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParamRefKeyword(TParamRefKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSelfRefKeyword(TSelfRefKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSeparatorKeyword(TSeparatorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTextKeyword(TTextKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTextInsertKeyword(TTextInsertKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTrueKeyword(TTrueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTInvalidCharacter(TInvalidCharacter node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

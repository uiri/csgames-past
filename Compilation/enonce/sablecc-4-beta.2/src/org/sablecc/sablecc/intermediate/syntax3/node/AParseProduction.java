/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AParseProduction extends PParseProduction
{
    private TString _name_;
    private final LinkedList<PParseAlternative> _parseAlternatives_ = new LinkedList<PParseAlternative>();
    private final LinkedList<PRetainedElement> _retainedElements_ = new LinkedList<PRetainedElement>();

    public AParseProduction()
    {
        // Constructor
    }

    public AParseProduction(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") List<PParseAlternative> _parseAlternatives_,
        @SuppressWarnings("hiding") List<PRetainedElement> _retainedElements_)
    {
        // Constructor
        setName(_name_);

        setParseAlternatives(_parseAlternatives_);

        setRetainedElements(_retainedElements_);

    }

    @Override
    public Object clone()
    {
        return new AParseProduction(
            cloneNode(this._name_),
            cloneList(this._parseAlternatives_),
            cloneList(this._retainedElements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParseProduction(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PParseAlternative> getParseAlternatives()
    {
        return this._parseAlternatives_;
    }

    public void setParseAlternatives(List<PParseAlternative> list)
    {
        this._parseAlternatives_.clear();
        this._parseAlternatives_.addAll(list);
        for(PParseAlternative e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PRetainedElement> getRetainedElements()
    {
        return this._retainedElements_;
    }

    public void setRetainedElements(List<PRetainedElement> list)
    {
        this._retainedElements_.clear();
        this._retainedElements_.addAll(list);
        for(PRetainedElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._parseAlternatives_)
            + toString(this._retainedElements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._parseAlternatives_.remove(child))
        {
            return;
        }

        if(this._retainedElements_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        for(ListIterator<PParseAlternative> i = this._parseAlternatives_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParseAlternative) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PRetainedElement> i = this._retainedElements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PRetainedElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AParser extends PParser
{
    private final LinkedList<PProduction> _productions_ = new LinkedList<PProduction>();
    private final LinkedList<PParseProduction> _parseProductions_ = new LinkedList<PParseProduction>();
    private final LinkedList<PStart> _starts_ = new LinkedList<PStart>();
    private final LinkedList<PParserInvestigator> _parserInvestigators_ = new LinkedList<PParserInvestigator>();
    private final LinkedList<PParserSelector> _parserSelectors_ = new LinkedList<PParserSelector>();

    public AParser()
    {
        // Constructor
    }

    public AParser(
        @SuppressWarnings("hiding") List<PProduction> _productions_,
        @SuppressWarnings("hiding") List<PParseProduction> _parseProductions_,
        @SuppressWarnings("hiding") List<PStart> _starts_,
        @SuppressWarnings("hiding") List<PParserInvestigator> _parserInvestigators_,
        @SuppressWarnings("hiding") List<PParserSelector> _parserSelectors_)
    {
        // Constructor
        setProductions(_productions_);

        setParseProductions(_parseProductions_);

        setStarts(_starts_);

        setParserInvestigators(_parserInvestigators_);

        setParserSelectors(_parserSelectors_);

    }

    @Override
    public Object clone()
    {
        return new AParser(
            cloneList(this._productions_),
            cloneList(this._parseProductions_),
            cloneList(this._starts_),
            cloneList(this._parserInvestigators_),
            cloneList(this._parserSelectors_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParser(this);
    }

    public LinkedList<PProduction> getProductions()
    {
        return this._productions_;
    }

    public void setProductions(List<PProduction> list)
    {
        this._productions_.clear();
        this._productions_.addAll(list);
        for(PProduction e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PParseProduction> getParseProductions()
    {
        return this._parseProductions_;
    }

    public void setParseProductions(List<PParseProduction> list)
    {
        this._parseProductions_.clear();
        this._parseProductions_.addAll(list);
        for(PParseProduction e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStart> getStarts()
    {
        return this._starts_;
    }

    public void setStarts(List<PStart> list)
    {
        this._starts_.clear();
        this._starts_.addAll(list);
        for(PStart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PParserInvestigator> getParserInvestigators()
    {
        return this._parserInvestigators_;
    }

    public void setParserInvestigators(List<PParserInvestigator> list)
    {
        this._parserInvestigators_.clear();
        this._parserInvestigators_.addAll(list);
        for(PParserInvestigator e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PParserSelector> getParserSelectors()
    {
        return this._parserSelectors_;
    }

    public void setParserSelectors(List<PParserSelector> list)
    {
        this._parserSelectors_.clear();
        this._parserSelectors_.addAll(list);
        for(PParserSelector e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._productions_)
            + toString(this._parseProductions_)
            + toString(this._starts_)
            + toString(this._parserInvestigators_)
            + toString(this._parserSelectors_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._productions_.remove(child))
        {
            return;
        }

        if(this._parseProductions_.remove(child))
        {
            return;
        }

        if(this._starts_.remove(child))
        {
            return;
        }

        if(this._parserInvestigators_.remove(child))
        {
            return;
        }

        if(this._parserSelectors_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PProduction> i = this._productions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProduction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PParseProduction> i = this._parseProductions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParseProduction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStart> i = this._starts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PParserInvestigator> i = this._parserInvestigators_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParserInvestigator) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PParserSelector> i = this._parserSelectors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParserSelector) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AProduction extends PProduction
{
    private TString _name_;
    private final LinkedList<PAlternative> _alternatives_ = new LinkedList<PAlternative>();

    public AProduction()
    {
        // Constructor
    }

    public AProduction(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") List<PAlternative> _alternatives_)
    {
        // Constructor
        setName(_name_);

        setAlternatives(_alternatives_);

    }

    @Override
    public Object clone()
    {
        return new AProduction(
            cloneNode(this._name_),
            cloneList(this._alternatives_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProduction(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PAlternative> getAlternatives()
    {
        return this._alternatives_;
    }

    public void setAlternatives(List<PAlternative> list)
    {
        this._alternatives_.clear();
        this._alternatives_.addAll(list);
        for(PAlternative e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._alternatives_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._alternatives_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        for(ListIterator<PAlternative> i = this._alternatives_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAlternative) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ALexerTransition extends PLexerTransition
{
    private TString _symbol_;
    private TString _target_;

    public ALexerTransition()
    {
        // Constructor
    }

    public ALexerTransition(
        @SuppressWarnings("hiding") TString _symbol_,
        @SuppressWarnings("hiding") TString _target_)
    {
        // Constructor
        setSymbol(_symbol_);

        setTarget(_target_);

    }

    @Override
    public Object clone()
    {
        return new ALexerTransition(
            cloneNode(this._symbol_),
            cloneNode(this._target_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALexerTransition(this);
    }

    public TString getSymbol()
    {
        return this._symbol_;
    }

    public void setSymbol(TString node)
    {
        if(this._symbol_ != null)
        {
            this._symbol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbol_ = node;
    }

    public TString getTarget()
    {
        return this._target_;
    }

    public void setTarget(TString node)
    {
        if(this._target_ != null)
        {
            this._target_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._target_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._symbol_)
            + toString(this._target_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._symbol_ == child)
        {
            this._symbol_ = null;
            return;
        }

        if(this._target_ == child)
        {
            this._target_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._symbol_ == oldChild)
        {
            setSymbol((TString) newChild);
            return;
        }

        if(this._target_ == oldChild)
        {
            setTarget((TString) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

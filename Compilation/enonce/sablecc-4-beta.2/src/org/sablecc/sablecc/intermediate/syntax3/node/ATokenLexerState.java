/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ATokenLexerState extends PLexerState
{
    private TString _name_;
    private TNumber _backCount_;
    private TString _marker_;
    private TString _token_;

    public ATokenLexerState()
    {
        // Constructor
    }

    public ATokenLexerState(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") TNumber _backCount_,
        @SuppressWarnings("hiding") TString _marker_,
        @SuppressWarnings("hiding") TString _token_)
    {
        // Constructor
        setName(_name_);

        setBackCount(_backCount_);

        setMarker(_marker_);

        setToken(_token_);

    }

    @Override
    public Object clone()
    {
        return new ATokenLexerState(
            cloneNode(this._name_),
            cloneNode(this._backCount_),
            cloneNode(this._marker_),
            cloneNode(this._token_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATokenLexerState(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TNumber getBackCount()
    {
        return this._backCount_;
    }

    public void setBackCount(TNumber node)
    {
        if(this._backCount_ != null)
        {
            this._backCount_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._backCount_ = node;
    }

    public TString getMarker()
    {
        return this._marker_;
    }

    public void setMarker(TString node)
    {
        if(this._marker_ != null)
        {
            this._marker_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._marker_ = node;
    }

    public TString getToken()
    {
        return this._token_;
    }

    public void setToken(TString node)
    {
        if(this._token_ != null)
        {
            this._token_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._token_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._backCount_)
            + toString(this._marker_)
            + toString(this._token_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._backCount_ == child)
        {
            this._backCount_ = null;
            return;
        }

        if(this._marker_ == child)
        {
            this._marker_ = null;
            return;
        }

        if(this._token_ == child)
        {
            this._token_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        if(this._backCount_ == oldChild)
        {
            setBackCount((TNumber) newChild);
            return;
        }

        if(this._marker_ == oldChild)
        {
            setMarker((TString) newChild);
            return;
        }

        if(this._token_ == oldChild)
        {
            setToken((TString) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

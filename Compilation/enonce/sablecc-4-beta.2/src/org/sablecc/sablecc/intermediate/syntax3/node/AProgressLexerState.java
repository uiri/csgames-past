/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AProgressLexerState extends PLexerState
{
    private TString _name_;
    private TString _marker_;
    private final LinkedList<PLexerTransition> _lexerTransitions_ = new LinkedList<PLexerTransition>();
    private final LinkedList<PInterval> _expectedIntervals_ = new LinkedList<PInterval>();
    private PBoolean _endExpected_;

    public AProgressLexerState()
    {
        // Constructor
    }

    public AProgressLexerState(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") TString _marker_,
        @SuppressWarnings("hiding") List<PLexerTransition> _lexerTransitions_,
        @SuppressWarnings("hiding") List<PInterval> _expectedIntervals_,
        @SuppressWarnings("hiding") PBoolean _endExpected_)
    {
        // Constructor
        setName(_name_);

        setMarker(_marker_);

        setLexerTransitions(_lexerTransitions_);

        setExpectedIntervals(_expectedIntervals_);

        setEndExpected(_endExpected_);

    }

    @Override
    public Object clone()
    {
        return new AProgressLexerState(
            cloneNode(this._name_),
            cloneNode(this._marker_),
            cloneList(this._lexerTransitions_),
            cloneList(this._expectedIntervals_),
            cloneNode(this._endExpected_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgressLexerState(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TString getMarker()
    {
        return this._marker_;
    }

    public void setMarker(TString node)
    {
        if(this._marker_ != null)
        {
            this._marker_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._marker_ = node;
    }

    public LinkedList<PLexerTransition> getLexerTransitions()
    {
        return this._lexerTransitions_;
    }

    public void setLexerTransitions(List<PLexerTransition> list)
    {
        this._lexerTransitions_.clear();
        this._lexerTransitions_.addAll(list);
        for(PLexerTransition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PInterval> getExpectedIntervals()
    {
        return this._expectedIntervals_;
    }

    public void setExpectedIntervals(List<PInterval> list)
    {
        this._expectedIntervals_.clear();
        this._expectedIntervals_.addAll(list);
        for(PInterval e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PBoolean getEndExpected()
    {
        return this._endExpected_;
    }

    public void setEndExpected(PBoolean node)
    {
        if(this._endExpected_ != null)
        {
            this._endExpected_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endExpected_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._marker_)
            + toString(this._lexerTransitions_)
            + toString(this._expectedIntervals_)
            + toString(this._endExpected_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._marker_ == child)
        {
            this._marker_ = null;
            return;
        }

        if(this._lexerTransitions_.remove(child))
        {
            return;
        }

        if(this._expectedIntervals_.remove(child))
        {
            return;
        }

        if(this._endExpected_ == child)
        {
            this._endExpected_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        if(this._marker_ == oldChild)
        {
            setMarker((TString) newChild);
            return;
        }

        for(ListIterator<PLexerTransition> i = this._lexerTransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLexerTransition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PInterval> i = this._expectedIntervals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInterval) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endExpected_ == oldChild)
        {
            setEndExpected((PBoolean) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

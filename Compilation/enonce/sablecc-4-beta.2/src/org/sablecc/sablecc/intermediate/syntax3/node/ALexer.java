/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ALexer extends PLexer
{
    private final LinkedList<PGroup> _groups_ = new LinkedList<PGroup>();
    private final LinkedList<PToken> _tokens_ = new LinkedList<PToken>();
    private final LinkedList<PTokenSelector> _tokenSelectors_ = new LinkedList<PTokenSelector>();
    private final LinkedList<PContext> _contexts_ = new LinkedList<PContext>();
    private final LinkedList<PTokenInvestigator> _tokenInvestigators_ = new LinkedList<PTokenInvestigator>();

    public ALexer()
    {
        // Constructor
    }

    public ALexer(
        @SuppressWarnings("hiding") List<PGroup> _groups_,
        @SuppressWarnings("hiding") List<PToken> _tokens_,
        @SuppressWarnings("hiding") List<PTokenSelector> _tokenSelectors_,
        @SuppressWarnings("hiding") List<PContext> _contexts_,
        @SuppressWarnings("hiding") List<PTokenInvestigator> _tokenInvestigators_)
    {
        // Constructor
        setGroups(_groups_);

        setTokens(_tokens_);

        setTokenSelectors(_tokenSelectors_);

        setContexts(_contexts_);

        setTokenInvestigators(_tokenInvestigators_);

    }

    @Override
    public Object clone()
    {
        return new ALexer(
            cloneList(this._groups_),
            cloneList(this._tokens_),
            cloneList(this._tokenSelectors_),
            cloneList(this._contexts_),
            cloneList(this._tokenInvestigators_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALexer(this);
    }

    public LinkedList<PGroup> getGroups()
    {
        return this._groups_;
    }

    public void setGroups(List<PGroup> list)
    {
        this._groups_.clear();
        this._groups_.addAll(list);
        for(PGroup e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PToken> getTokens()
    {
        return this._tokens_;
    }

    public void setTokens(List<PToken> list)
    {
        this._tokens_.clear();
        this._tokens_.addAll(list);
        for(PToken e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PTokenSelector> getTokenSelectors()
    {
        return this._tokenSelectors_;
    }

    public void setTokenSelectors(List<PTokenSelector> list)
    {
        this._tokenSelectors_.clear();
        this._tokenSelectors_.addAll(list);
        for(PTokenSelector e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PContext> getContexts()
    {
        return this._contexts_;
    }

    public void setContexts(List<PContext> list)
    {
        this._contexts_.clear();
        this._contexts_.addAll(list);
        for(PContext e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PTokenInvestigator> getTokenInvestigators()
    {
        return this._tokenInvestigators_;
    }

    public void setTokenInvestigators(List<PTokenInvestigator> list)
    {
        this._tokenInvestigators_.clear();
        this._tokenInvestigators_.addAll(list);
        for(PTokenInvestigator e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._groups_)
            + toString(this._tokens_)
            + toString(this._tokenSelectors_)
            + toString(this._contexts_)
            + toString(this._tokenInvestigators_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._groups_.remove(child))
        {
            return;
        }

        if(this._tokens_.remove(child))
        {
            return;
        }

        if(this._tokenSelectors_.remove(child))
        {
            return;
        }

        if(this._contexts_.remove(child))
        {
            return;
        }

        if(this._tokenInvestigators_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PGroup> i = this._groups_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PToken> i = this._tokens_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PToken) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PTokenSelector> i = this._tokenSelectors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTokenSelector) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PContext> i = this._contexts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PContext) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PTokenInvestigator> i = this._tokenInvestigators_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTokenInvestigator) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

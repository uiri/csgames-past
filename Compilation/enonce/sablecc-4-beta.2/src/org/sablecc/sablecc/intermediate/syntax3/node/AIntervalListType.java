/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AIntervalListType extends PListType
{
    private TString _unit_;
    private PBoolean _publicUnit_;
    private TNumber _from_;
    private TNumber _to_;

    public AIntervalListType()
    {
        // Constructor
    }

    public AIntervalListType(
        @SuppressWarnings("hiding") TString _unit_,
        @SuppressWarnings("hiding") PBoolean _publicUnit_,
        @SuppressWarnings("hiding") TNumber _from_,
        @SuppressWarnings("hiding") TNumber _to_)
    {
        // Constructor
        setUnit(_unit_);

        setPublicUnit(_publicUnit_);

        setFrom(_from_);

        setTo(_to_);

    }

    @Override
    public Object clone()
    {
        return new AIntervalListType(
            cloneNode(this._unit_),
            cloneNode(this._publicUnit_),
            cloneNode(this._from_),
            cloneNode(this._to_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntervalListType(this);
    }

    public TString getUnit()
    {
        return this._unit_;
    }

    public void setUnit(TString node)
    {
        if(this._unit_ != null)
        {
            this._unit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unit_ = node;
    }

    public PBoolean getPublicUnit()
    {
        return this._publicUnit_;
    }

    public void setPublicUnit(PBoolean node)
    {
        if(this._publicUnit_ != null)
        {
            this._publicUnit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._publicUnit_ = node;
    }

    public TNumber getFrom()
    {
        return this._from_;
    }

    public void setFrom(TNumber node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TNumber getTo()
    {
        return this._to_;
    }

    public void setTo(TNumber node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unit_)
            + toString(this._publicUnit_)
            + toString(this._from_)
            + toString(this._to_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unit_ == child)
        {
            this._unit_ = null;
            return;
        }

        if(this._publicUnit_ == child)
        {
            this._publicUnit_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._unit_ == oldChild)
        {
            setUnit((TString) newChild);
            return;
        }

        if(this._publicUnit_ == oldChild)
        {
            setPublicUnit((PBoolean) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TNumber) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

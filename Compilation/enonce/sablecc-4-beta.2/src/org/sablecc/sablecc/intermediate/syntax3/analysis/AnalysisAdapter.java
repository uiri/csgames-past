/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.analysis;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAIntermediateRepresentation(AIntermediateRepresentation node)
    {
        defaultCase(node);
    }

    public void caseALanguage(ALanguage node)
    {
        defaultCase(node);
    }

    public void caseALexer(ALexer node)
    {
        defaultCase(node);
    }

    public void caseAGroup(AGroup node)
    {
        defaultCase(node);
    }

    public void caseANormalToken(ANormalToken node)
    {
        defaultCase(node);
    }

    public void caseASelectionToken(ASelectionToken node)
    {
        defaultCase(node);
    }

    public void caseATokenSelector(ATokenSelector node)
    {
        defaultCase(node);
    }

    public void caseATokenInvestigator(ATokenInvestigator node)
    {
        defaultCase(node);
    }

    public void caseAContext(AContext node)
    {
        defaultCase(node);
    }

    public void caseAAlphabet(AAlphabet node)
    {
        defaultCase(node);
    }

    public void caseASymbol(ASymbol node)
    {
        defaultCase(node);
    }

    public void caseAInterval(AInterval node)
    {
        defaultCase(node);
    }

    public void caseALexerAutomaton(ALexerAutomaton node)
    {
        defaultCase(node);
    }

    public void caseAProgressLexerState(AProgressLexerState node)
    {
        defaultCase(node);
    }

    public void caseATokenLexerState(ATokenLexerState node)
    {
        defaultCase(node);
    }

    public void caseALexerTransition(ALexerTransition node)
    {
        defaultCase(node);
    }

    public void caseAAcceptLexerAction(AAcceptLexerAction node)
    {
        defaultCase(node);
    }

    public void caseAIgnoreLexerAction(AIgnoreLexerAction node)
    {
        defaultCase(node);
    }

    public void caseARejectLexerAction(ARejectLexerAction node)
    {
        defaultCase(node);
    }

    public void caseAParseLexerAction(AParseLexerAction node)
    {
        defaultCase(node);
    }

    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    public void caseAParser(AParser node)
    {
        defaultCase(node);
    }

    public void caseAProduction(AProduction node)
    {
        defaultCase(node);
    }

    public void caseAAlternative(AAlternative node)
    {
        defaultCase(node);
    }

    public void caseAElement(AElement node)
    {
        defaultCase(node);
    }

    public void caseASingleElementType(ASingleElementType node)
    {
        defaultCase(node);
    }

    public void caseAListElementType(AListElementType node)
    {
        defaultCase(node);
    }

    public void caseAOneSingleType(AOneSingleType node)
    {
        defaultCase(node);
    }

    public void caseAZeroOrOneSingleType(AZeroOrOneSingleType node)
    {
        defaultCase(node);
    }

    public void caseANumberListType(ANumberListType node)
    {
        defaultCase(node);
    }

    public void caseAIntervalListType(AIntervalListType node)
    {
        defaultCase(node);
    }

    public void caseAAtLeastListType(AAtLeastListType node)
    {
        defaultCase(node);
    }

    public void caseASeparatedNumberListType(ASeparatedNumberListType node)
    {
        defaultCase(node);
    }

    public void caseASeparatedIntervalListType(ASeparatedIntervalListType node)
    {
        defaultCase(node);
    }

    public void caseASeparatedAtLeastListType(ASeparatedAtLeastListType node)
    {
        defaultCase(node);
    }

    public void caseAParseProduction(AParseProduction node)
    {
        defaultCase(node);
    }

    public void caseARetainedElement(ARetainedElement node)
    {
        defaultCase(node);
    }

    public void caseAParseAlternative(AParseAlternative node)
    {
        defaultCase(node);
    }

    public void caseAParseElement(AParseElement node)
    {
        defaultCase(node);
    }

    public void caseATransformation(ATransformation node)
    {
        defaultCase(node);
    }

    public void caseANullValue(ANullValue node)
    {
        defaultCase(node);
    }

    public void caseAReferenceValue(AReferenceValue node)
    {
        defaultCase(node);
    }

    public void caseANewValue(ANewValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseAIntervalValue(AIntervalValue node)
    {
        defaultCase(node);
    }

    public void caseAAtLeastValue(AAtLeastValue node)
    {
        defaultCase(node);
    }

    public void caseASeparatedNumberValue(ASeparatedNumberValue node)
    {
        defaultCase(node);
    }

    public void caseASeparatedIntervalValue(ASeparatedIntervalValue node)
    {
        defaultCase(node);
    }

    public void caseASeparatedAtLeastValue(ASeparatedAtLeastValue node)
    {
        defaultCase(node);
    }

    public void caseAReferenceListValue(AReferenceListValue node)
    {
        defaultCase(node);
    }

    public void caseAListReferenceListValue(AListReferenceListValue node)
    {
        defaultCase(node);
    }

    public void caseANewListValue(ANewListValue node)
    {
        defaultCase(node);
    }

    public void caseAStart(AStart node)
    {
        defaultCase(node);
    }

    public void caseAParserAutomaton(AParserAutomaton node)
    {
        defaultCase(node);
    }

    public void caseAParserState(AParserState node)
    {
        defaultCase(node);
    }

    public void caseAParserInvestigator(AParserInvestigator node)
    {
        defaultCase(node);
    }

    public void caseANoLookDecision(ANoLookDecision node)
    {
        defaultCase(node);
    }

    public void caseALookDecision(ALookDecision node)
    {
        defaultCase(node);
    }

    public void caseADepth(ADepth node)
    {
        defaultCase(node);
    }

    public void caseAChoice(AChoice node)
    {
        defaultCase(node);
    }

    public void caseACondition(ACondition node)
    {
        defaultCase(node);
    }

    public void caseALookSymbol(ALookSymbol node)
    {
        defaultCase(node);
    }

    public void caseAShiftAction(AShiftAction node)
    {
        defaultCase(node);
    }

    public void caseAReduceAction(AReduceAction node)
    {
        defaultCase(node);
    }

    public void caseASelectionAction(ASelectionAction node)
    {
        defaultCase(node);
    }

    public void caseATreeAction(ATreeAction node)
    {
        defaultCase(node);
    }

    public void caseATokenAction(ATokenAction node)
    {
        defaultCase(node);
    }

    public void caseAExpectedSelection(AExpectedSelection node)
    {
        defaultCase(node);
    }

    public void caseAParserSelector(AParserSelector node)
    {
        defaultCase(node);
    }

    public void caseATokenParserTransition(ATokenParserTransition node)
    {
        defaultCase(node);
    }

    public void caseAProductionParserTransition(AProductionParserTransition node)
    {
        defaultCase(node);
    }

    public void caseTAcceptKeyword(TAcceptKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAlphabetKeyword(TAlphabetKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAlternativeKeyword(TAlternativeKeyword node)
    {
        defaultCase(node);
    }

    public void caseTArgumentNameKeyword(TArgumentNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAtLeastTypeKeyword(TAtLeastTypeKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAtLeastValueKeyword(TAtLeastValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTBackCountKeyword(TBackCountKeyword node)
    {
        defaultCase(node);
    }

    public void caseTChoiceKeyword(TChoiceKeyword node)
    {
        defaultCase(node);
    }

    public void caseTConditionKeyword(TConditionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTContextNameKeyword(TContextNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTDepthKeyword(TDepthKeyword node)
    {
        defaultCase(node);
    }

    public void caseTElementKeyword(TElementKeyword node)
    {
        defaultCase(node);
    }

    public void caseTEndExpectedKeyword(TEndExpectedKeyword node)
    {
        defaultCase(node);
    }

    public void caseTExpectedSelectionKeyword(TExpectedSelectionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTFalseKeyword(TFalseKeyword node)
    {
        defaultCase(node);
    }

    public void caseTFromKeyword(TFromKeyword node)
    {
        defaultCase(node);
    }

    public void caseTGroupKeyword(TGroupKeyword node)
    {
        defaultCase(node);
    }

    public void caseTGroupsKeyword(TGroupsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIgnoreKeyword(TIgnoreKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIntervalKeyword(TIntervalKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIntervalTypeKeyword(TIntervalTypeKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIntervalValueKeyword(TIntervalValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTInvestigatorNameKeyword(TInvestigatorNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTInvestigatorsKeyword(TInvestigatorsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLanguageKeyword(TLanguageKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLexerKeyword(TLexerKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLexerAutomatonKeyword(TLexerAutomatonKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLexerStateKeyword(TLexerStateKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLexerTransitionKeyword(TLexerTransitionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTListReferenceValueKeyword(TListReferenceValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLookDepthKeyword(TLookDepthKeyword node)
    {
        defaultCase(node);
    }

    public void caseTLookSymbolKeyword(TLookSymbolKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMarkerKeyword(TMarkerKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNameKeyword(TNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNewValueKeyword(TNewValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNullValueKeyword(TNullValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNumberTypeKeyword(TNumberTypeKeyword node)
    {
        defaultCase(node);
    }

    public void caseTNumberValueKeyword(TNumberValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTOneKeyword(TOneKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseKeyword(TParseKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseAlternativeKeyword(TParseAlternativeKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseAlternativeNameKeyword(TParseAlternativeNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseElementKeyword(TParseElementKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseElementNameKeyword(TParseElementNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseProductionKeyword(TParseProductionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParseProductionNameKeyword(TParseProductionNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParserKeyword(TParserKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParserInvestigatorKeyword(TParserInvestigatorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParserSelectorKeyword(TParserSelectorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTParserStateKeyword(TParserStateKeyword node)
    {
        defaultCase(node);
    }

    public void caseTProductionKeyword(TProductionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTProductionTransitionKeyword(TProductionTransitionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTPublicKeyword(TPublicKeyword node)
    {
        defaultCase(node);
    }

    public void caseTReduceActionKeyword(TReduceActionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTReferenceValueKeyword(TReferenceValueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTRejectKeyword(TRejectKeyword node)
    {
        defaultCase(node);
    }

    public void caseTRetainedElementKeyword(TRetainedElementKeyword node)
    {
        defaultCase(node);
    }

    public void caseTRetainedElementNameKeyword(TRetainedElementNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTShiftActionKeyword(TShiftActionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTStartNameKeyword(TStartNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSelectionActionKeyword(TSelectionActionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSelectorNameKeyword(TSelectorNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSeparatorKeyword(TSeparatorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTStartKeyword(TStartKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSymbolKeyword(TSymbolKeyword node)
    {
        defaultCase(node);
    }

    public void caseTSymbolNameKeyword(TSymbolNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTargetNameKeyword(TTargetNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTToKeyword(TToKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTokenKeyword(TTokenKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTokenActionKeyword(TTokenActionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTokenNameKeyword(TTokenNameKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTokenTransitionKeyword(TTokenTransitionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTokensKeyword(TTokensKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTransformationKeyword(TTransformationKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTreeActionKeyword(TTreeActionKeyword node)
    {
        defaultCase(node);
    }

    public void caseTTrueKeyword(TTrueKeyword node)
    {
        defaultCase(node);
    }

    public void caseTZeroOrOneKeyword(TZeroOrOneKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTInvalidCharacter(TInvalidCharacter node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AIntermediateRepresentation extends PIntermediateRepresentation
{
    private PLanguage _language_;
    private PLexer _lexer_;
    private PParser _parser_;

    public AIntermediateRepresentation()
    {
        // Constructor
    }

    public AIntermediateRepresentation(
        @SuppressWarnings("hiding") PLanguage _language_,
        @SuppressWarnings("hiding") PLexer _lexer_,
        @SuppressWarnings("hiding") PParser _parser_)
    {
        // Constructor
        setLanguage(_language_);

        setLexer(_lexer_);

        setParser(_parser_);

    }

    @Override
    public Object clone()
    {
        return new AIntermediateRepresentation(
            cloneNode(this._language_),
            cloneNode(this._lexer_),
            cloneNode(this._parser_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntermediateRepresentation(this);
    }

    public PLanguage getLanguage()
    {
        return this._language_;
    }

    public void setLanguage(PLanguage node)
    {
        if(this._language_ != null)
        {
            this._language_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._language_ = node;
    }

    public PLexer getLexer()
    {
        return this._lexer_;
    }

    public void setLexer(PLexer node)
    {
        if(this._lexer_ != null)
        {
            this._lexer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lexer_ = node;
    }

    public PParser getParser()
    {
        return this._parser_;
    }

    public void setParser(PParser node)
    {
        if(this._parser_ != null)
        {
            this._parser_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parser_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._language_)
            + toString(this._lexer_)
            + toString(this._parser_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._language_ == child)
        {
            this._language_ = null;
            return;
        }

        if(this._lexer_ == child)
        {
            this._lexer_ = null;
            return;
        }

        if(this._parser_ == child)
        {
            this._parser_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._language_ == oldChild)
        {
            setLanguage((PLanguage) newChild);
            return;
        }

        if(this._lexer_ == oldChild)
        {
            setLexer((PLexer) newChild);
            return;
        }

        if(this._parser_ == oldChild)
        {
            setParser((PParser) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ASelectionAction extends PAction
{
    private TString _selector_;
    private final LinkedList<PExpectedSelection> _expectedSelections_ = new LinkedList<PExpectedSelection>();

    public ASelectionAction()
    {
        // Constructor
    }

    public ASelectionAction(
        @SuppressWarnings("hiding") TString _selector_,
        @SuppressWarnings("hiding") List<PExpectedSelection> _expectedSelections_)
    {
        // Constructor
        setSelector(_selector_);

        setExpectedSelections(_expectedSelections_);

    }

    @Override
    public Object clone()
    {
        return new ASelectionAction(
            cloneNode(this._selector_),
            cloneList(this._expectedSelections_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelectionAction(this);
    }

    public TString getSelector()
    {
        return this._selector_;
    }

    public void setSelector(TString node)
    {
        if(this._selector_ != null)
        {
            this._selector_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selector_ = node;
    }

    public LinkedList<PExpectedSelection> getExpectedSelections()
    {
        return this._expectedSelections_;
    }

    public void setExpectedSelections(List<PExpectedSelection> list)
    {
        this._expectedSelections_.clear();
        this._expectedSelections_.addAll(list);
        for(PExpectedSelection e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._selector_)
            + toString(this._expectedSelections_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._selector_ == child)
        {
            this._selector_ = null;
            return;
        }

        if(this._expectedSelections_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._selector_ == oldChild)
        {
            setSelector((TString) newChild);
            return;
        }

        for(ListIterator<PExpectedSelection> i = this._expectedSelections_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpectedSelection) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

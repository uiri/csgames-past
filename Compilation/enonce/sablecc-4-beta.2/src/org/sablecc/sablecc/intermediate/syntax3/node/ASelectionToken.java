/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ASelectionToken extends PToken
{
    private TString _name_;
    private PBoolean _public_;
    private TString _selector_;

    public ASelectionToken()
    {
        // Constructor
    }

    public ASelectionToken(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") PBoolean _public_,
        @SuppressWarnings("hiding") TString _selector_)
    {
        // Constructor
        setName(_name_);

        setPublic(_public_);

        setSelector(_selector_);

    }

    @Override
    public Object clone()
    {
        return new ASelectionToken(
            cloneNode(this._name_),
            cloneNode(this._public_),
            cloneNode(this._selector_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelectionToken(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PBoolean getPublic()
    {
        return this._public_;
    }

    public void setPublic(PBoolean node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public TString getSelector()
    {
        return this._selector_;
    }

    public void setSelector(TString node)
    {
        if(this._selector_ != null)
        {
            this._selector_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selector_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._public_)
            + toString(this._selector_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._selector_ == child)
        {
            this._selector_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        if(this._public_ == oldChild)
        {
            setPublic((PBoolean) newChild);
            return;
        }

        if(this._selector_ == oldChild)
        {
            setSelector((TString) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

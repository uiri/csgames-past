/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ANormalToken extends PToken
{
    private TString _name_;
    private PBoolean _public_;
    private final LinkedList<TString> _groups_ = new LinkedList<TString>();
    private final LinkedList<TString> _investigators_ = new LinkedList<TString>();

    public ANormalToken()
    {
        // Constructor
    }

    public ANormalToken(
        @SuppressWarnings("hiding") TString _name_,
        @SuppressWarnings("hiding") PBoolean _public_,
        @SuppressWarnings("hiding") List<TString> _groups_,
        @SuppressWarnings("hiding") List<TString> _investigators_)
    {
        // Constructor
        setName(_name_);

        setPublic(_public_);

        setGroups(_groups_);

        setInvestigators(_investigators_);

    }

    @Override
    public Object clone()
    {
        return new ANormalToken(
            cloneNode(this._name_),
            cloneNode(this._public_),
            cloneList(this._groups_),
            cloneList(this._investigators_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANormalToken(this);
    }

    public TString getName()
    {
        return this._name_;
    }

    public void setName(TString node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PBoolean getPublic()
    {
        return this._public_;
    }

    public void setPublic(PBoolean node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public LinkedList<TString> getGroups()
    {
        return this._groups_;
    }

    public void setGroups(List<TString> list)
    {
        this._groups_.clear();
        this._groups_.addAll(list);
        for(TString e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TString> getInvestigators()
    {
        return this._investigators_;
    }

    public void setInvestigators(List<TString> list)
    {
        this._investigators_.clear();
        this._investigators_.addAll(list);
        for(TString e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._public_)
            + toString(this._groups_)
            + toString(this._investigators_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._groups_.remove(child))
        {
            return;
        }

        if(this._investigators_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TString) newChild);
            return;
        }

        if(this._public_ == oldChild)
        {
            setPublic((PBoolean) newChild);
            return;
        }

        for(ListIterator<TString> i = this._groups_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TString) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TString> i = this._investigators_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TString) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

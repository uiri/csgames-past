/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ATransformation extends PTransformation
{
    private TString _retainedElement_;
    private PValue _value_;

    public ATransformation()
    {
        // Constructor
    }

    public ATransformation(
        @SuppressWarnings("hiding") TString _retainedElement_,
        @SuppressWarnings("hiding") PValue _value_)
    {
        // Constructor
        setRetainedElement(_retainedElement_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new ATransformation(
            cloneNode(this._retainedElement_),
            cloneNode(this._value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATransformation(this);
    }

    public TString getRetainedElement()
    {
        return this._retainedElement_;
    }

    public void setRetainedElement(TString node)
    {
        if(this._retainedElement_ != null)
        {
            this._retainedElement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._retainedElement_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._retainedElement_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._retainedElement_ == child)
        {
            this._retainedElement_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._retainedElement_ == oldChild)
        {
            setRetainedElement((TString) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

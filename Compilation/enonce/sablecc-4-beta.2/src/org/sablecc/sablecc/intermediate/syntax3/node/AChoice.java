/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.intermediate.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.intermediate.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AChoice extends PChoice
{
    private final LinkedList<PCondition> _conditions_ = new LinkedList<PCondition>();
    private PAction _action_;

    public AChoice()
    {
        // Constructor
    }

    public AChoice(
        @SuppressWarnings("hiding") List<PCondition> _conditions_,
        @SuppressWarnings("hiding") PAction _action_)
    {
        // Constructor
        setConditions(_conditions_);

        setAction(_action_);

    }

    @Override
    public Object clone()
    {
        return new AChoice(
            cloneList(this._conditions_),
            cloneNode(this._action_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChoice(this);
    }

    public LinkedList<PCondition> getConditions()
    {
        return this._conditions_;
    }

    public void setConditions(List<PCondition> list)
    {
        this._conditions_.clear();
        this._conditions_.addAll(list);
        for(PCondition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PAction getAction()
    {
        return this._action_;
    }

    public void setAction(PAction node)
    {
        if(this._action_ != null)
        {
            this._action_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._action_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditions_)
            + toString(this._action_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditions_.remove(child))
        {
            return;
        }

        if(this._action_ == child)
        {
            this._action_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PCondition> i = this._conditions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCondition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._action_ == oldChild)
        {
            setAction((PAction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

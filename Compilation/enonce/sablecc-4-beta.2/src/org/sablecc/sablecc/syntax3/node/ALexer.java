/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ALexer extends PLexer
{
    private TLexerKeyword _lexerKeyword_;
    private final LinkedList<PNamedExpression> _namedExpressions_ = new LinkedList<PNamedExpression>();
    private final LinkedList<PGroup> _groups_ = new LinkedList<PGroup>();
    private final LinkedList<PLexerContext> _lexerContexts_ = new LinkedList<PLexerContext>();
    private final LinkedList<PLexerInvestigator> _lexerInvestigators_ = new LinkedList<PLexerInvestigator>();

    public ALexer()
    {
        // Constructor
    }

    public ALexer(
        @SuppressWarnings("hiding") TLexerKeyword _lexerKeyword_,
        @SuppressWarnings("hiding") List<PNamedExpression> _namedExpressions_,
        @SuppressWarnings("hiding") List<PGroup> _groups_,
        @SuppressWarnings("hiding") List<PLexerContext> _lexerContexts_,
        @SuppressWarnings("hiding") List<PLexerInvestigator> _lexerInvestigators_)
    {
        // Constructor
        setLexerKeyword(_lexerKeyword_);

        setNamedExpressions(_namedExpressions_);

        setGroups(_groups_);

        setLexerContexts(_lexerContexts_);

        setLexerInvestigators(_lexerInvestigators_);

    }

    @Override
    public Object clone()
    {
        return new ALexer(
            cloneNode(this._lexerKeyword_),
            cloneList(this._namedExpressions_),
            cloneList(this._groups_),
            cloneList(this._lexerContexts_),
            cloneList(this._lexerInvestigators_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALexer(this);
    }

    public TLexerKeyword getLexerKeyword()
    {
        return this._lexerKeyword_;
    }

    public void setLexerKeyword(TLexerKeyword node)
    {
        if(this._lexerKeyword_ != null)
        {
            this._lexerKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lexerKeyword_ = node;
    }

    public LinkedList<PNamedExpression> getNamedExpressions()
    {
        return this._namedExpressions_;
    }

    public void setNamedExpressions(List<PNamedExpression> list)
    {
        this._namedExpressions_.clear();
        this._namedExpressions_.addAll(list);
        for(PNamedExpression e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PGroup> getGroups()
    {
        return this._groups_;
    }

    public void setGroups(List<PGroup> list)
    {
        this._groups_.clear();
        this._groups_.addAll(list);
        for(PGroup e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PLexerContext> getLexerContexts()
    {
        return this._lexerContexts_;
    }

    public void setLexerContexts(List<PLexerContext> list)
    {
        this._lexerContexts_.clear();
        this._lexerContexts_.addAll(list);
        for(PLexerContext e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PLexerInvestigator> getLexerInvestigators()
    {
        return this._lexerInvestigators_;
    }

    public void setLexerInvestigators(List<PLexerInvestigator> list)
    {
        this._lexerInvestigators_.clear();
        this._lexerInvestigators_.addAll(list);
        for(PLexerInvestigator e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lexerKeyword_)
            + toString(this._namedExpressions_)
            + toString(this._groups_)
            + toString(this._lexerContexts_)
            + toString(this._lexerInvestigators_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lexerKeyword_ == child)
        {
            this._lexerKeyword_ = null;
            return;
        }

        if(this._namedExpressions_.remove(child))
        {
            return;
        }

        if(this._groups_.remove(child))
        {
            return;
        }

        if(this._lexerContexts_.remove(child))
        {
            return;
        }

        if(this._lexerInvestigators_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lexerKeyword_ == oldChild)
        {
            setLexerKeyword((TLexerKeyword) newChild);
            return;
        }

        for(ListIterator<PNamedExpression> i = this._namedExpressions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNamedExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PGroup> i = this._groups_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PLexerContext> i = this._lexerContexts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLexerContext) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PLexerInvestigator> i = this._lexerInvestigators_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLexerInvestigator) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

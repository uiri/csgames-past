/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ANormalParserProduction extends PParserProduction
{
    private PQualifier _qualifier_;
    private TIdentifier _name_;
    private TAssign _assign_;
    private final LinkedList<PParserAlternative> _parserAlternatives_ = new LinkedList<PParserAlternative>();
    private final LinkedList<PParserPriority> _parserPriorities_ = new LinkedList<PParserPriority>();
    private PParserInvestigator _parserInvestigator_;

    public ANormalParserProduction()
    {
        // Constructor
    }

    public ANormalParserProduction(
        @SuppressWarnings("hiding") PQualifier _qualifier_,
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") List<PParserAlternative> _parserAlternatives_,
        @SuppressWarnings("hiding") List<PParserPriority> _parserPriorities_,
        @SuppressWarnings("hiding") PParserInvestigator _parserInvestigator_)
    {
        // Constructor
        setQualifier(_qualifier_);

        setName(_name_);

        setAssign(_assign_);

        setParserAlternatives(_parserAlternatives_);

        setParserPriorities(_parserPriorities_);

        setParserInvestigator(_parserInvestigator_);

    }

    @Override
    public Object clone()
    {
        return new ANormalParserProduction(
            cloneNode(this._qualifier_),
            cloneNode(this._name_),
            cloneNode(this._assign_),
            cloneList(this._parserAlternatives_),
            cloneList(this._parserPriorities_),
            cloneNode(this._parserInvestigator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANormalParserProduction(this);
    }

    public PQualifier getQualifier()
    {
        return this._qualifier_;
    }

    public void setQualifier(PQualifier node)
    {
        if(this._qualifier_ != null)
        {
            this._qualifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qualifier_ = node;
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public LinkedList<PParserAlternative> getParserAlternatives()
    {
        return this._parserAlternatives_;
    }

    public void setParserAlternatives(List<PParserAlternative> list)
    {
        this._parserAlternatives_.clear();
        this._parserAlternatives_.addAll(list);
        for(PParserAlternative e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PParserPriority> getParserPriorities()
    {
        return this._parserPriorities_;
    }

    public void setParserPriorities(List<PParserPriority> list)
    {
        this._parserPriorities_.clear();
        this._parserPriorities_.addAll(list);
        for(PParserPriority e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PParserInvestigator getParserInvestigator()
    {
        return this._parserInvestigator_;
    }

    public void setParserInvestigator(PParserInvestigator node)
    {
        if(this._parserInvestigator_ != null)
        {
            this._parserInvestigator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parserInvestigator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._qualifier_)
            + toString(this._name_)
            + toString(this._assign_)
            + toString(this._parserAlternatives_)
            + toString(this._parserPriorities_)
            + toString(this._parserInvestigator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._qualifier_ == child)
        {
            this._qualifier_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._parserAlternatives_.remove(child))
        {
            return;
        }

        if(this._parserPriorities_.remove(child))
        {
            return;
        }

        if(this._parserInvestigator_ == child)
        {
            this._parserInvestigator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._qualifier_ == oldChild)
        {
            setQualifier((PQualifier) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        for(ListIterator<PParserAlternative> i = this._parserAlternatives_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParserAlternative) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PParserPriority> i = this._parserPriorities_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParserPriority) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._parserInvestigator_ == oldChild)
        {
            setParserInvestigator((PParserInvestigator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

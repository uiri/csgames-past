/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AAlternativeTransformation extends PAlternativeTransformation
{
    private PAlternativeReference _alternativeReference_;
    private TArrow _arrow_;
    private final LinkedList<PTransformationElement> _transformationElements_ = new LinkedList<PTransformationElement>();

    public AAlternativeTransformation()
    {
        // Constructor
    }

    public AAlternativeTransformation(
        @SuppressWarnings("hiding") PAlternativeReference _alternativeReference_,
        @SuppressWarnings("hiding") TArrow _arrow_,
        @SuppressWarnings("hiding") List<PTransformationElement> _transformationElements_)
    {
        // Constructor
        setAlternativeReference(_alternativeReference_);

        setArrow(_arrow_);

        setTransformationElements(_transformationElements_);

    }

    @Override
    public Object clone()
    {
        return new AAlternativeTransformation(
            cloneNode(this._alternativeReference_),
            cloneNode(this._arrow_),
            cloneList(this._transformationElements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAlternativeTransformation(this);
    }

    public PAlternativeReference getAlternativeReference()
    {
        return this._alternativeReference_;
    }

    public void setAlternativeReference(PAlternativeReference node)
    {
        if(this._alternativeReference_ != null)
        {
            this._alternativeReference_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alternativeReference_ = node;
    }

    public TArrow getArrow()
    {
        return this._arrow_;
    }

    public void setArrow(TArrow node)
    {
        if(this._arrow_ != null)
        {
            this._arrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrow_ = node;
    }

    public LinkedList<PTransformationElement> getTransformationElements()
    {
        return this._transformationElements_;
    }

    public void setTransformationElements(List<PTransformationElement> list)
    {
        this._transformationElements_.clear();
        this._transformationElements_.addAll(list);
        for(PTransformationElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._alternativeReference_)
            + toString(this._arrow_)
            + toString(this._transformationElements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._alternativeReference_ == child)
        {
            this._alternativeReference_ = null;
            return;
        }

        if(this._arrow_ == child)
        {
            this._arrow_ = null;
            return;
        }

        if(this._transformationElements_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._alternativeReference_ == oldChild)
        {
            setAlternativeReference((PAlternativeReference) newChild);
            return;
        }

        if(this._arrow_ == oldChild)
        {
            setArrow((TArrow) newChild);
            return;
        }

        for(ListIterator<PTransformationElement> i = this._transformationElements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTransformationElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AShortestExpression extends PExpression
{
    private TShortestKeyword _shortestKeyword_;
    private PExpression _expression_;

    public AShortestExpression()
    {
        // Constructor
    }

    public AShortestExpression(
        @SuppressWarnings("hiding") TShortestKeyword _shortestKeyword_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setShortestKeyword(_shortestKeyword_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new AShortestExpression(
            cloneNode(this._shortestKeyword_),
            cloneNode(this._expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShortestExpression(this);
    }

    public TShortestKeyword getShortestKeyword()
    {
        return this._shortestKeyword_;
    }

    public void setShortestKeyword(TShortestKeyword node)
    {
        if(this._shortestKeyword_ != null)
        {
            this._shortestKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shortestKeyword_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._shortestKeyword_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._shortestKeyword_ == child)
        {
            this._shortestKeyword_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._shortestKeyword_ == oldChild)
        {
            setShortestKeyword((TShortestKeyword) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

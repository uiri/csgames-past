/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AAtLeastManyOperator extends PManyOperator
{
    private TCaret _caret_;
    private TLPar _lPar_;
    private TNumber _number_;
    private TThreeDots _threeDots_;
    private TRPar _rPar_;

    public AAtLeastManyOperator()
    {
        // Constructor
    }

    public AAtLeastManyOperator(
        @SuppressWarnings("hiding") TCaret _caret_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TThreeDots _threeDots_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setCaret(_caret_);

        setLPar(_lPar_);

        setNumber(_number_);

        setThreeDots(_threeDots_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AAtLeastManyOperator(
            cloneNode(this._caret_),
            cloneNode(this._lPar_),
            cloneNode(this._number_),
            cloneNode(this._threeDots_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAtLeastManyOperator(this);
    }

    public TCaret getCaret()
    {
        return this._caret_;
    }

    public void setCaret(TCaret node)
    {
        if(this._caret_ != null)
        {
            this._caret_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caret_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TThreeDots getThreeDots()
    {
        return this._threeDots_;
    }

    public void setThreeDots(TThreeDots node)
    {
        if(this._threeDots_ != null)
        {
            this._threeDots_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._threeDots_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._caret_)
            + toString(this._lPar_)
            + toString(this._number_)
            + toString(this._threeDots_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._caret_ == child)
        {
            this._caret_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._threeDots_ == child)
        {
            this._threeDots_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._caret_ == oldChild)
        {
            setCaret((TCaret) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._threeDots_ == oldChild)
        {
            setThreeDots((TThreeDots) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

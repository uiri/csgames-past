/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AProductionTransformations extends PProductionTransformations
{
    private TProductionKeyword _productionKeyword_;
    private final LinkedList<PProductionTransformation> _productionTransformations_ = new LinkedList<PProductionTransformation>();

    public AProductionTransformations()
    {
        // Constructor
    }

    public AProductionTransformations(
        @SuppressWarnings("hiding") TProductionKeyword _productionKeyword_,
        @SuppressWarnings("hiding") List<PProductionTransformation> _productionTransformations_)
    {
        // Constructor
        setProductionKeyword(_productionKeyword_);

        setProductionTransformations(_productionTransformations_);

    }

    @Override
    public Object clone()
    {
        return new AProductionTransformations(
            cloneNode(this._productionKeyword_),
            cloneList(this._productionTransformations_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProductionTransformations(this);
    }

    public TProductionKeyword getProductionKeyword()
    {
        return this._productionKeyword_;
    }

    public void setProductionKeyword(TProductionKeyword node)
    {
        if(this._productionKeyword_ != null)
        {
            this._productionKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._productionKeyword_ = node;
    }

    public LinkedList<PProductionTransformation> getProductionTransformations()
    {
        return this._productionTransformations_;
    }

    public void setProductionTransformations(List<PProductionTransformation> list)
    {
        this._productionTransformations_.clear();
        this._productionTransformations_.addAll(list);
        for(PProductionTransformation e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._productionKeyword_)
            + toString(this._productionTransformations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._productionKeyword_ == child)
        {
            this._productionKeyword_ = null;
            return;
        }

        if(this._productionTransformations_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._productionKeyword_ == oldChild)
        {
            setProductionKeyword((TProductionKeyword) newChild);
            return;
        }

        for(ListIterator<PProductionTransformation> i = this._productionTransformations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProductionTransformation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

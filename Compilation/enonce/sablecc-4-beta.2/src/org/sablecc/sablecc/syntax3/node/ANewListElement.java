/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ANewListElement extends PListElement
{
    private TNewKeyword _newKeyword_;
    private PAlternativeReference _alternativeReference_;
    private TLPar _lPar_;
    private final LinkedList<PTransformationElement> _transformationElements_ = new LinkedList<PTransformationElement>();
    private TRPar _rPar_;

    public ANewListElement()
    {
        // Constructor
    }

    public ANewListElement(
        @SuppressWarnings("hiding") TNewKeyword _newKeyword_,
        @SuppressWarnings("hiding") PAlternativeReference _alternativeReference_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") List<PTransformationElement> _transformationElements_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setNewKeyword(_newKeyword_);

        setAlternativeReference(_alternativeReference_);

        setLPar(_lPar_);

        setTransformationElements(_transformationElements_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ANewListElement(
            cloneNode(this._newKeyword_),
            cloneNode(this._alternativeReference_),
            cloneNode(this._lPar_),
            cloneList(this._transformationElements_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewListElement(this);
    }

    public TNewKeyword getNewKeyword()
    {
        return this._newKeyword_;
    }

    public void setNewKeyword(TNewKeyword node)
    {
        if(this._newKeyword_ != null)
        {
            this._newKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newKeyword_ = node;
    }

    public PAlternativeReference getAlternativeReference()
    {
        return this._alternativeReference_;
    }

    public void setAlternativeReference(PAlternativeReference node)
    {
        if(this._alternativeReference_ != null)
        {
            this._alternativeReference_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alternativeReference_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public LinkedList<PTransformationElement> getTransformationElements()
    {
        return this._transformationElements_;
    }

    public void setTransformationElements(List<PTransformationElement> list)
    {
        this._transformationElements_.clear();
        this._transformationElements_.addAll(list);
        for(PTransformationElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._newKeyword_)
            + toString(this._alternativeReference_)
            + toString(this._lPar_)
            + toString(this._transformationElements_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._newKeyword_ == child)
        {
            this._newKeyword_ = null;
            return;
        }

        if(this._alternativeReference_ == child)
        {
            this._alternativeReference_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._transformationElements_.remove(child))
        {
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._newKeyword_ == oldChild)
        {
            setNewKeyword((TNewKeyword) newChild);
            return;
        }

        if(this._alternativeReference_ == oldChild)
        {
            setAlternativeReference((PAlternativeReference) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        for(ListIterator<PTransformationElement> i = this._transformationElements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTransformationElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

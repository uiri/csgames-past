/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ATransformation extends PTransformation
{
    private TTransformationKeyword _transformationKeyword_;
    private PProductionTransformations _productionTransformations_;
    private PAlternativeTransformations _alternativeTransformations_;

    public ATransformation()
    {
        // Constructor
    }

    public ATransformation(
        @SuppressWarnings("hiding") TTransformationKeyword _transformationKeyword_,
        @SuppressWarnings("hiding") PProductionTransformations _productionTransformations_,
        @SuppressWarnings("hiding") PAlternativeTransformations _alternativeTransformations_)
    {
        // Constructor
        setTransformationKeyword(_transformationKeyword_);

        setProductionTransformations(_productionTransformations_);

        setAlternativeTransformations(_alternativeTransformations_);

    }

    @Override
    public Object clone()
    {
        return new ATransformation(
            cloneNode(this._transformationKeyword_),
            cloneNode(this._productionTransformations_),
            cloneNode(this._alternativeTransformations_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATransformation(this);
    }

    public TTransformationKeyword getTransformationKeyword()
    {
        return this._transformationKeyword_;
    }

    public void setTransformationKeyword(TTransformationKeyword node)
    {
        if(this._transformationKeyword_ != null)
        {
            this._transformationKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._transformationKeyword_ = node;
    }

    public PProductionTransformations getProductionTransformations()
    {
        return this._productionTransformations_;
    }

    public void setProductionTransformations(PProductionTransformations node)
    {
        if(this._productionTransformations_ != null)
        {
            this._productionTransformations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._productionTransformations_ = node;
    }

    public PAlternativeTransformations getAlternativeTransformations()
    {
        return this._alternativeTransformations_;
    }

    public void setAlternativeTransformations(PAlternativeTransformations node)
    {
        if(this._alternativeTransformations_ != null)
        {
            this._alternativeTransformations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alternativeTransformations_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._transformationKeyword_)
            + toString(this._productionTransformations_)
            + toString(this._alternativeTransformations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._transformationKeyword_ == child)
        {
            this._transformationKeyword_ = null;
            return;
        }

        if(this._productionTransformations_ == child)
        {
            this._productionTransformations_ = null;
            return;
        }

        if(this._alternativeTransformations_ == child)
        {
            this._alternativeTransformations_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._transformationKeyword_ == oldChild)
        {
            setTransformationKeyword((TTransformationKeyword) newChild);
            return;
        }

        if(this._productionTransformations_ == oldChild)
        {
            setProductionTransformations((PProductionTransformations) newChild);
            return;
        }

        if(this._alternativeTransformations_ == oldChild)
        {
            setAlternativeTransformations((PAlternativeTransformations) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

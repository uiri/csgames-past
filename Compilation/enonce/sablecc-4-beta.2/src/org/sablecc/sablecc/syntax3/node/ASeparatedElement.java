/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.node;

import org.sablecc.sablecc.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ASeparatedElement extends PElement
{
    private TElementName _elementName_;
    private PUnit _unit_;
    private TSeparatorKeyword _separatorKeyword_;
    private PUnit _separator_;
    private PManyOperator _manyOperator_;

    public ASeparatedElement()
    {
        // Constructor
    }

    public ASeparatedElement(
        @SuppressWarnings("hiding") TElementName _elementName_,
        @SuppressWarnings("hiding") PUnit _unit_,
        @SuppressWarnings("hiding") TSeparatorKeyword _separatorKeyword_,
        @SuppressWarnings("hiding") PUnit _separator_,
        @SuppressWarnings("hiding") PManyOperator _manyOperator_)
    {
        // Constructor
        setElementName(_elementName_);

        setUnit(_unit_);

        setSeparatorKeyword(_separatorKeyword_);

        setSeparator(_separator_);

        setManyOperator(_manyOperator_);

    }

    @Override
    public Object clone()
    {
        return new ASeparatedElement(
            cloneNode(this._elementName_),
            cloneNode(this._unit_),
            cloneNode(this._separatorKeyword_),
            cloneNode(this._separator_),
            cloneNode(this._manyOperator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASeparatedElement(this);
    }

    public TElementName getElementName()
    {
        return this._elementName_;
    }

    public void setElementName(TElementName node)
    {
        if(this._elementName_ != null)
        {
            this._elementName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementName_ = node;
    }

    public PUnit getUnit()
    {
        return this._unit_;
    }

    public void setUnit(PUnit node)
    {
        if(this._unit_ != null)
        {
            this._unit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unit_ = node;
    }

    public TSeparatorKeyword getSeparatorKeyword()
    {
        return this._separatorKeyword_;
    }

    public void setSeparatorKeyword(TSeparatorKeyword node)
    {
        if(this._separatorKeyword_ != null)
        {
            this._separatorKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separatorKeyword_ = node;
    }

    public PUnit getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(PUnit node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    public PManyOperator getManyOperator()
    {
        return this._manyOperator_;
    }

    public void setManyOperator(PManyOperator node)
    {
        if(this._manyOperator_ != null)
        {
            this._manyOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._manyOperator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elementName_)
            + toString(this._unit_)
            + toString(this._separatorKeyword_)
            + toString(this._separator_)
            + toString(this._manyOperator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elementName_ == child)
        {
            this._elementName_ = null;
            return;
        }

        if(this._unit_ == child)
        {
            this._unit_ = null;
            return;
        }

        if(this._separatorKeyword_ == child)
        {
            this._separatorKeyword_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        if(this._manyOperator_ == child)
        {
            this._manyOperator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elementName_ == oldChild)
        {
            setElementName((TElementName) newChild);
            return;
        }

        if(this._unit_ == oldChild)
        {
            setUnit((PUnit) newChild);
            return;
        }

        if(this._separatorKeyword_ == oldChild)
        {
            setSeparatorKeyword((TSeparatorKeyword) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((PUnit) newChild);
            return;
        }

        if(this._manyOperator_ == oldChild)
        {
            setManyOperator((PManyOperator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
